{"map":"{\"version\":3,\"sources\":[\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/panels/EdgeInfoTable.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/actions/graph.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/actions/selectedEdge.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/actions/selectedNode.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/actions/visibleGraph.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/misc/LoadingBar.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/common.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/controls/NodeSearch.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/panels/EdgeTimechart.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/panels/NodeInfoTable.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/panels/VisibleScope.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/prespectives/EventTable.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/prespectives/EventTimeline.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/config.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/reducers/visibleGraph.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/mutators/traversals/backwardTravel.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/visjs-hook.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/mutators/traversals/forwardTravel.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/ContextMenu.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/prespectives/ForceGraph.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/prespectives/MarkdownExport.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/prespectives/TreeGraph.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/views/Upload.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/visualization/controls/VisibleTypeToggles.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/containers/GraphRedoUndo.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/containers/GraphPage.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/misc/DataTable.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/EntriesTable.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/components/Router.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/reducers/graph.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/reducers/selectedEdge.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/reducers/selectedNode.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/reducers/index.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/App.tsx\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/registerServiceWorker.ts\",\"/Users/yohaneschristianto/Documents/Personal/beagle/beagle/web/static/src/index.tsx\"],\"names\":[\"EdgeInfoTable\",\"_super\",\"tslib__WEBPACK_IMPORTED_MODULE_0__\",\"prototype\",\"render\",\"undefined\",\"this\",\"props\",\"edge\",\"react__WEBPACK_IMPORTED_MODULE_2__\",\"semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__\",\"as\",\"className\",\"properties\",\"data\",\"every\",\"e\",\"lodash__WEBPACK_IMPORTED_MODULE_1__\",\"allKeys_1\",\"Set\",\"tableData\",\"map\",\"entry\",\"Object\",\"keys\",\"forEach\",\"key\",\"add\",\"tmp\",\"Date\",\"setUTCSeconds\",\"Number\",\"timestamp\",\"_a\",\"k\",\"v\",\"foundKeys\",\"Array\",\"from\",\"semantic_ui_react__WEBPACK_IMPORTED_MODULE_4__\",\"celled\",\"striped\",\"headerRow\",\"fixed\",\"renderBodyRow\",\"item\",\"i\",\"global\",\"console\",\"log\",\"cells\",\"values\",\"stringified\",\"JSON\",\"stringify\",\"slice\",\"length\",\"style\",\"wordBreak\",\"ActionTypes\",\"selectedEdge_ActionTypes\",\"selectedNode_ActionTypes\",\"setNodesAndEdges\",\"nodes\",\"edges\",\"type\",\"SET_NODES_AND_EDGES\",\"payload\",\"SetSelectedEdge\",\"SET_SELECTED_EDGE\",\"store\",\"getState\",\"graph\",\"setSelectedNode\",\"node\",\"SET_SELECTED_NODE\",\"visibleGraph_ActionTypes\",\"misc_LoadingBar\",\"react\",\"Segment\",\"padded\",\"basic\",\"display\",\"justifyContent\",\"alignItems\",\"height\",\"Dimmer\",\"active\",\"inverted\",\"Loader\",\"size\",\"text\",\"setVisibleNodes\",\"SET_VISIBLE_NODES\",\"pullInNeighbors\",\"PULL_IN_NEIGHBORS\",\"setVisibleNodeTypes\",\"nodeTypes\",\"SET_VISIBLE_NODE_TYPES\",\"setVisibleEdgeTypes\",\"edgeTypes\",\"SET_VISIBLE_EDGE_TYPES\",\"runMutatorFromNode\",\"mutator\",\"RUN_MUTATOR_FROM_NODE\",\"selectedNode\",\"visibleNodes\",\"visibleGraph\",\"present\",\"visibleEdges\",\"visibleNodeTypes\",\"visibleEdgeTypes\",\"snakeToSpaced\",\"word\",\"lodash\",\"s\",\"first\",\"rest\",\"toUpperCase\",\"concat\",\"join\",\"NodeSearch\",\"_this\",\"apply\",\"arguments\",\"state\",\"groupedNodes\",\"nodeColors\",\"isLoading\",\"results\",\"value\",\"resetComponent\",\"setState\",\"handleResultSelect\",\"result\",\"_display\",\"dispatch\",\"id\",\"ADD_NODE\",\"handleSearchChange\",\"setTimeout\",\"re\",\"RegExp\",\"isMatch\",\"test\",\"filteredResults\",\"accum\",\"nodeType\",\"name\",\"resultsRender\",\"_key\",\"Label\",\"content\",\"color\",\"List\",\"Item\",\"Content\",\"highlightText\",\"categoryRender\",\"category\",\"tag\",\"backgroundColor\",\"tslib_es6\",\"getDerivedStateFromProps\",\"prevState\",\"Search\",\"input\",\"fluid\",\"placeholder\",\"loading\",\"onResultSelect\",\"onSearchChange\",\"leading\",\"resultRenderer\",\"categoryRenderer\",\"minCharacters\",\"highlight\",\"trim\",\"toString\",\"regex\",\"split\",\"filter\",\"part\",\"EdgeTimeChart\",\"call\",\"setHintValue\",\"resetHintValue\",\"valuke\",\"counts\",\"m\",\"date\",\"x\",\"y\",\"XYPlotFlex\",\"react_vis_es\",\"xType\",\"xDomain\",\"earliestEvent\",\"latestEvent\",\"margin\",\"bottom\",\"title\",\"tickLabelAngle\",\"NodeInfoTable\",\"Header\",\"Table\",\"columns\",\"Row\",\"HeaderCell\",\"colSpan\",\"textAlign\",\"index\",\"Cell\",\"VisibleScope\",\"earliestTime\",\"latestTime\",\"Grid\",\"centered\",\"Column\",\"width\",\"EventTable\",\"fieldsToTable\",\"compact\",\"pair\",\"handleNodeClick\",\"handleEgeClick\",\"makeNodesTable\",\"selectable\",\"sortable\",\"Body\",\"n\",\"onClick\",\"_node_type\",\"makeEdgesTable\",\"idsToNodes\",\"to\",\"label\",\"reduce\",\"overflowY\",\"Accordion\",\"defaultActiveIndex\",\"exclusive\",\"panels\",\"children\",\"Divider\",\"horizontal\",\"Icon\",\"EventTimeline\",\"items\",\"groups\",\"idx\",\"targetNode\",\"edgeInfo\",\"start\",\"group\",\"ele\",\"paddingTop\",\"build_default\",\"a\",\"ref\",\"c\",\"el\",\"$el\",\"options\",\"maxHeight\",\"verticalScroll\",\"showCurrentTime\",\"GRAPH_VIZ_CONFIG\",\"shape\",\"shapeProperties\",\"borderDashes\",\"borderWidth\",\"border\",\"font\",\"scaling\",\"enabled\",\"layout\",\"improvedLayout\",\"hierarchical\",\"inherit\",\"align\",\"smooth\",\"physics\",\"solver\",\"forceAtlas2Based\",\"gravitationalConstant\",\"centralGravity\",\"springConstant\",\"springLength\",\"damping\",\"avoidOverlap\",\"adaptiveTimestep\",\"stabilization\",\"iterations\",\"fit\",\"window\",\"innerHeight\",\"TREE_VIZ_CONFIG\",\"parse\",\"sortMethod\",\"initialState\",\"PULL_IN_LIMIT\",\"updateVisibleEdges\",\"nodeIds\",\"findMinMax\",\"arr\",\"min\",\"max\",\"len\",\"stringToEpoch\",\"timeStr\",\"d\",\"network\",\"mutate\",\"queue\",\"nodesToAdd\",\"curr\",\"pop\",\"candidates\",\"push\",\"newNodes\",\"initVisjsControl\",\"visJSNetwork\",\"getNodeAt\",\"event\",\"freezeGraph\",\"stopSimulation\",\"ContextMenu\",\"runBackWardsTravel\",\"nodeId\",\"position\",\"backwardTravel\",\"runForwardsTravel\",\"forwardTravel\",\"es6\",\"ForceGraph\",\"actions\",\"onDoubleClick\",\"onHold\",\"HIDE_NODE\",\"onRightClick\",\"clickEvent\",\"pointer\",\"DOM\",\"visualization_ContextMenu\",\"react_graph_vis_lib_default\",\"getNetwork\",\"events\",\"click\",\"doubleClick\",\"hold\",\"oncontext\",\"styles\",\"Markdown\",\"h3\",\"JIRA\",\"MarkdownExport\",\"copy\",\"segment\",\"document\",\"getElementById\",\"textField\",\"createElement\",\"innerHTML\",\"innerText\",\"body\",\"appendChild\",\"select\",\"execCommand\",\"remove\",\"nodesMDTable\",\"nodeGroups\",\"__\",\"replace\",\"edgesMDTable\",\"timeVar\",\"handleSyntaxChange\",\"nextState\",\"Button\",\"primary\",\"icon\",\"Select\",\"float\",\"onChange\",\"TreeGraph\",\"Upload\",\"setActiveTranformer\",\"target\",\"selectedTransformer\",\"setActiveBackend\",\"selectedBackend\",\"handleToggleAdvanced\",\"advancedVisible\",\"updateTransformers\",\"selectedDatasource\",\"transformers\",\"params\",\"isExternal\",\"formParams\",\"handleCommentChange\",\"comment\",\"onDrop\",\"filename\",\"accepted\",\"current\",\"onParamChange\",\"paramName\",\"onSubmit\",\"missing\",\"param\",\"required\",\"includes\",\"missingNames\",\"errorMessage\",\"graphRoute\",\"processing\",\"steps\",\"upload\",\"done\",\"transform\",\"view\",\"formData\",\"FormData\",\"append\",\"fetch\",\"postRoute\",\"method\",\"then\",\"resp\",\"json\",\"hasOwnProperty\",\"message\",\"redirect\",\"link\",\"postUploadHandler\",\"self\",\"makeDropZones\",\"formsy_semantic_ui_react_lib\",\"Field\",\"dist_es\",\"multiple\",\"getRootProps\",\"getInputProps\",\"makeInputs\",\"Input\",\"default\",\"makeSteps\",\"Step\",\"Group\",\"attached\",\"widths\",\"completed\",\"Title\",\"Description\",\"href\",\"pipelines\",\"backends\",\"ready\",\"componentWillMount\",\"datasources\",\"firstDataSource\",\"Container\",\"marginTop\",\"search\",\"Popup\",\"trigger\",\"fontSize\",\"fontWeight\",\"datasource\",\"transformer\",\"backend\",\"TextArea\",\"Checkbox\",\"checked\",\"Message\",\"negative\",\"header\",\"positive\",\"Redirect\",\"info\",\"VisibleTypeToggles\",\"toggleNodeVisiblity\",\"String\",\"nextNodeTypes\",\"toggleEdgeVisibility\",\"nextEdgeTypes\",\"allNodeTypes\",\"allEdgeTypes\",\"divided\",\"floated\",\"edgeType\",\"GraphRedoUndo_GraphRedoUndo\",\"GraphRedoUndo\",\"marginLeft\",\"labelPosition\",\"onUndo\",\"disabled\",\"canUndo\",\"onRedo\",\"canRedo\",\"onReset\",\"containers_GraphRedoUndo\",\"es\",\"past\",\"future\",\"redux_undo_lib\",\"undo\",\"redo\",\"jumpToPast\",\"EXLUDED_BY_DEFAULT\",\"GraphPage_GraphPage\",\"GraphPage\",\"componentWillUnmount\",\"SET_VISIBLE_EDGES\",\"clearHistory\",\"componentDidUpdate\",\"prevProps\",\"lib\",\"warning\",\"loadGraph\",\"match\",\"response\",\"graphJson\",\"directed\",\"links\",\"source\",\"multigraph\",\"newNode\",\"assign\",\"substring\",\"_color\",\"alertNodes\",\"sample\",\"loadAndResetView\",\"tab\",\"activeIndex\",\"timeOut\",\"makeDivider\",\"Tab\",\"menu\",\"secondary\",\"pointing\",\"panes\",\"menuItem\",\"prespectives_ForceGraph\",\"prespectives_TreeGraph\",\"prespectives_EventTimeline\",\"prespectives_EventTable\",\"prespectives_MarkdownExport\",\"views_Upload\",\"bind\",\"stretched\",\"panels_VisibleScope\",\"controls_NodeSearch\",\"controls_VisibleTypeToggles\",\"panels_NodeInfoTable\",\"selectedEdge\",\"containers_GraphPage\",\"DataTable\",\"handlePageClick\",\"currentTarget\",\"dataset\",\"page\",\"currentPage\",\"handleDirectionClick\",\"direction\",\"change\",\"numberOfPages\",\"rowsPerPage\",\"Math\",\"ceil\",\"columnHeader\",\"currentData\",\"startPage\",\"pageRange\",\"entryIdx\",\"tableProps\",\"TableHeader\",\"TableRow\",\"TableHeaderCell\",\"TableBody\",\"row\",\"TableCell\",\"collapsing\",\"TableFooter\",\"Menu\",\"pagination\",\"MenuItem\",\"data-page\",\"data-direction\",\"pageIndex\",\"EntriesTable\",\"entries\",\"pairs\",\"metadata\",\"startsWith\",\"Link\",\"maxWidth\",\"misc_DataTable\",\"Router\",\"Sidebar\",\"renderEntriesForCategory\",\"components_EntriesTable\",\"route\",\"component\",\"BrowserRouter\",\"Sidebar_Sidebar\",\"animation\",\"visible\",\"vertical\",\"Switch\",\"Route\",\"exact\",\"path\",\"graph_initialState\",\"selectedEdge_initialState\",\"selectedNode_initialState\",\"reducers_reducer\",\"redux\",\"redux_undo_lib_default\",\"action\",\"nextVisibleEdges\",\"nextVisibleNodes\",\"accumulator\",\"find\",\"presentNode\",\"visibleGraph_pullInNeighbors\",\"visibleNode\",\"_b\",\"nodeObj\",\"indexOf\",\"addSingleNode\",\"_c\",\"_d\",\"_e\",\"filterForVisibleNodes\",\"ignoreInitialState\",\"toastr\",\"SET_EDGES\",\"SET_NODES\",\"App\",\"lib_default\",\"newestOnTop\",\"preventDuplicates\",\"progressBar\",\"closeOnToastrClick\",\"isLocalhost\",\"Boolean\",\"location\",\"hostname\",\"registerValidSW\",\"swUrl\",\"navigator\",\"serviceWorker\",\"register\",\"registration\",\"onupdatefound\",\"installingWorker\",\"installing\",\"onstatechange\",\"controller\",\"catch\",\"error\",\"react_dom\",\"src_App\",\"URL\",\"origin\",\"addEventListener\",\"status\",\"headers\",\"get\",\"unregister\",\"reload\",\"checkValidServiceWorker\"],\"mappings\":\"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\",\"sourcesContent\":[\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport { Header, Table } from 'semantic-ui-react';\\nimport { Edge } from 'src/models';\\n\\nexport interface EdgeInfoTableProps {\\n    edge: Edge;\\n}\\n\\nexport default class EdgeInfoTable extends React.Component<EdgeInfoTableProps, any> {\\n    public render() {\\n        if (this.props.edge === undefined) {\\n            return (\\n                <Header as=\\\"h3\\\" className=\\\"centered\\\">\\n                    Click an Edge to view information\\n                </Header>\\n            );\\n        } else if (this.props.edge.properties.data.every(e => _.isNull(e))) {\\n            // If all the events are `null`, that means this edge has no underyling events.\\n            return (\\n                <Header as=\\\"h5\\\" className=\\\"centered\\\">\\n                    Edge contains no underlying events.\\n                </Header>\\n            );\\n        } else {\\n            // Clone since we modify the edge later\\n            const edge = _.cloneDeep(this.props.edge);\\n\\n            const allKeys = new Set<string>();\\n            const tableData = edge.properties.data.map(entry => {\\n                if (_.isNull(entry)) {\\n                    return {};\\n                }\\n                Object.keys(entry).forEach(key => allKeys.add(_.capitalize(key)));\\n\\n                if (\\\"timestamp\\\" in entry) {\\n                    const tmp = new Date(0);\\n                    tmp.setUTCSeconds(Number(entry.timestamp));\\n                    entry.timestamp = _.toString(tmp); // Display as string.\\n                }\\n                // Captialize the object keys\\n                return _.fromPairs(_.toPairs(entry).map(([k, v]) => [_.capitalize(k), v]));\\n            });\\n\\n            const foundKeys = Array.from(allKeys);\\n\\n            const renderBodyRow = (item: object, i: number) => {\\n                global.console.log(item, i);\\n                const r = {\\n                    key: `row-${i}`,\\n                    cells: [\\n                        ...Object.values(item).map(v => {\\n                            if (_.isNull(v)) {\\n                                return \\\"\\\";\\n                            } else if (_.isNumber(v)) {\\n                                return v;\\n                            }\\n                            const stringified = JSON.stringify(v);\\n                            return stringified.slice(1, stringified.length - 1);\\n                        })\\n                    ],\\n                    style: {\\n                        wordBreak: \\\"break-all\\\"\\n                    }\\n                };\\n                return r;\\n            };\\n\\n            return (\\n                <Table\\n                    celled={true}\\n                    striped={true}\\n                    headerRow={foundKeys}\\n                    fixed={true}\\n                    tableData={tableData}\\n                    renderBodyRow={renderBodyRow}\\n                />\\n            );\\n        }\\n    }\\n}\\n\\n// <Table.Header>\\n// <Table.Row>\\n//     <Table.HeaderCell colSpan=\\\"2\\\" textAlign=\\\"center\\\">\\n//         <Header>{this.props.edge.label}</Header>\\n//     </Table.HeaderCell>\\n// </Table.Row>\\n// <Table.Row>\\n//     <Table.HeaderCell>Key</Table.HeaderCell>\\n//     <Table.HeaderCell>Value</Table.HeaderCell>\\n// </Table.Row>\\n// {Object.keys(this.props.edge.properties).map(\\n//     (key: string, index: number) => (\\n//         <Table.Row key={index}>\\n//             <Table.Cell>{key}</Table.Cell>\\n//             <Table.Cell style={{ wordBreak: \\\"break-all\\\" }}>\\n//                 {/* JSON Stringify any null or empty objects */\\n//                 this.props.edge.properties[key] === null ||\\n//                 typeof this.props.edge.properties[key] === \\\"object\\\"\\n//                     ? JSON.stringify(this.props.edge.properties[key])\\n//                     : this.props.edge.properties[key]}\\n//             </Table.Cell>\\n//         </Table.Row>\\n//     )\\n// )}\\n// </Table.Header>\\n\",\"import { Edge, Node } from '../models';\\n\\nexport enum ActionTypes {\\n    SET_NODES = \\\"[graph] SET_NODES\\\",\\n    SET_EDGES = \\\"[graph] SET_EDGES\\\",\\n    SET_NODES_AND_EDGES = \\\"[graph] SET_NODES_AND_EDGES\\\"\\n}\\n\\nexport interface SetNodes {\\n    type: ActionTypes.SET_NODES;\\n    payload: { nodes: Node[] };\\n}\\n\\nexport interface SetEdges {\\n    type: ActionTypes.SET_EDGES;\\n    payload: { edges: Edge[] };\\n}\\n\\nexport interface SetNodesAndEdges {\\n    type: ActionTypes.SET_NODES_AND_EDGES;\\n    payload: { nodes: Node[]; edges: Edge[] };\\n}\\n\\n/* tslint:disable:object-literal-sort-keys */\\nexport function setNodes(nodes: Node[]): SetNodes {\\n    return {\\n        type: ActionTypes.SET_NODES,\\n        payload: {\\n            nodes\\n        }\\n    };\\n}\\n/* tslint:disable:object-literal-sort-keys */\\nexport function setEdges(edges: Edge[]): SetEdges {\\n    return {\\n        type: ActionTypes.SET_EDGES,\\n        payload: {\\n            edges\\n        }\\n    };\\n}\\n\\nexport function setNodesAndEdges(nodes: Node[], edges: Edge[]): SetNodesAndEdges {\\n    return {\\n        type: ActionTypes.SET_NODES_AND_EDGES,\\n        payload: {\\n            nodes,\\n            edges\\n        }\\n    };\\n}\\n\\nexport type Action = SetEdges | SetNodes | SetNodesAndEdges;\\n\",\"import { store } from 'src/App';\\n\\nimport { Edge } from '../models';\\n\\nexport enum ActionTypes {\\n    SET_SELECTED_EDGE = \\\"[selected_edge] SET_SELECTED_EDGE\\\"\\n}\\n\\nexport interface SetSelectedEdge {\\n    type: ActionTypes.SET_SELECTED_EDGE;\\n    edges: Edge[];\\n    payload: { edge: number | undefined };\\n}\\n\\nexport function SetSelectedEdge(edge: number | undefined): SetSelectedEdge {\\n    return {\\n        type: ActionTypes.SET_SELECTED_EDGE,\\n        edges: store.getState().graph.edges,\\n        payload: {\\n            edge\\n        }\\n    };\\n}\\n\\nexport type Action = SetSelectedEdge;\\n\",\"import { store } from 'src/App';\\n\\nimport { Node } from '../models';\\n\\nexport enum ActionTypes {\\n    SET_SELECTED_NODE = \\\"[selected_node] SET_SELECTED_NODE\\\"\\n}\\n\\nexport interface SetSelectedNode {\\n    type: ActionTypes.SET_SELECTED_NODE;\\n    nodes: Node[];\\n    payload: { node: number | undefined };\\n}\\n\\n/* tslint:disable:object-literal-sort-keys */\\nexport function setSelectedNode(node: number | undefined): SetSelectedNode {\\n    return {\\n        type: ActionTypes.SET_SELECTED_NODE,\\n        nodes: store.getState().graph.nodes,\\n        payload: {\\n            node\\n        }\\n    };\\n}\\n\\nexport type Action = SetSelectedNode;\\n\",\"import { store } from 'src/App';\\nimport Mutator from 'src/mutators';\\n\\nimport { Edge, Node } from '../models';\\n\\nexport enum ActionTypes {\\n    SET_VISIBLE_NODES = \\\"[visible_graph] SET_VISIBLE_NODES\\\",\\n    SET_VISIBLE_EDGES = \\\"[visible_graph] SET_VISIBLE_EDGES\\\",\\n    PULL_IN_NEIGHBORS = \\\"[visible_graph] PULL_IN_NEIGHBORS\\\",\\n    HIDE_NODE = \\\"[visible_graph] HIDE_NODE\\\",\\n    ADD_NODE = \\\"[visible_graph] ADD_NODE\\\",\\n    SET_VISIBLE_NODE_TYPES = \\\"[visible_graph] SET_VISIBLE_NODE_TYPES\\\",\\n    SET_VISIBLE_EDGE_TYPES = \\\"[visible_graph] SET_VISIBLE_EDGE_TYPES\\\",\\n    RUN_MUTATOR_FROM_NODE = \\\"[mutator] RUN_MUTATOR_FROM_NODE\\\"\\n}\\n\\nexport interface SetVisibleNodes {\\n    type: ActionTypes.SET_VISIBLE_NODES;\\n    payload: { nodes: Node[] };\\n}\\n\\nexport interface SetVisibleEdges {\\n    type: ActionTypes.SET_VISIBLE_EDGES;\\n    payload: { edges: Edge[] };\\n}\\n\\nexport interface PullInNeighbors {\\n    type: ActionTypes.PULL_IN_NEIGHBORS;\\n    payload: { node: number };\\n    nodes: Node[];\\n    edges: Edge[];\\n}\\n\\nexport interface HideNode {\\n    type: ActionTypes.HIDE_NODE;\\n    payload: { node: number };\\n}\\n\\nexport interface AddNode {\\n    type: ActionTypes.ADD_NODE;\\n    payload: { node: number };\\n    nodes: Node[];\\n    edges: Edge[];\\n}\\n\\nexport interface SetVisibleNodeTypes {\\n    type: ActionTypes.SET_VISIBLE_NODE_TYPES;\\n    payload: { nodeTypes: string[] };\\n}\\n\\nexport interface SetVisibleEdgeTypes {\\n    type: ActionTypes.SET_VISIBLE_EDGE_TYPES;\\n    payload: { edgeTypes: string[] };\\n}\\n\\nexport interface RunMutatorFromNode {\\n    type: ActionTypes.RUN_MUTATOR_FROM_NODE;\\n    selectedNode: number;\\n    mutator: Mutator;\\n    nodes: Node[];\\n    edges: Edge[];\\n    visibleNodes: Node[];\\n    visibleEdges: Edge[];\\n    visibleNodeTypes: string[];\\n    visibleEdgeTypes: string[];\\n}\\n\\n/* tslint:disable:object-literal-sort-keys */\\nexport function setVisibleNodes(nodes: Node[]): SetVisibleNodes {\\n    return {\\n        type: ActionTypes.SET_VISIBLE_NODES,\\n        payload: {\\n            nodes\\n        }\\n    };\\n}\\n\\n/* tslint:disable:object-literal-sort-keys */\\nexport function setVisibleEdges(edges: Edge[]): SetVisibleEdges {\\n    return {\\n        type: ActionTypes.SET_VISIBLE_EDGES,\\n        payload: {\\n            edges\\n        }\\n    };\\n}\\n\\nexport function pullInNeighbors(node: number): PullInNeighbors {\\n    return {\\n        type: ActionTypes.PULL_IN_NEIGHBORS,\\n        payload: {\\n            node\\n        },\\n        nodes: store.getState().graph.nodes,\\n        edges: store.getState().graph.edges\\n    };\\n}\\n\\nexport function hideNode(node: number): HideNode {\\n    return {\\n        type: ActionTypes.HIDE_NODE,\\n        payload: {\\n            node\\n        }\\n    };\\n}\\n\\nexport function addNode(node: number): AddNode {\\n    return {\\n        type: ActionTypes.ADD_NODE,\\n        payload: {\\n            node\\n        },\\n        nodes: store.getState().graph.nodes,\\n        edges: store.getState().graph.edges\\n    };\\n}\\n\\nexport function setVisibleNodeTypes(nodeTypes: string[]): SetVisibleNodeTypes {\\n    return {\\n        type: ActionTypes.SET_VISIBLE_NODE_TYPES,\\n        payload: {\\n            nodeTypes\\n        }\\n    };\\n}\\n\\n/* tslint:disable:object-literal-sort-keys */\\nexport function setVisibleEdgeTypes(edgeTypes: string[]): SetVisibleEdgeTypes {\\n    return {\\n        type: ActionTypes.SET_VISIBLE_EDGE_TYPES,\\n        payload: {\\n            edgeTypes\\n        }\\n    };\\n}\\n\\n/* tslint:disable:object-literal-sort-keys */\\nexport function runMutatorFromNode(node: number, mutator: Mutator): RunMutatorFromNode {\\n    return {\\n        type: ActionTypes.RUN_MUTATOR_FROM_NODE,\\n        selectedNode: node,\\n        mutator,\\n        nodes: store.getState().graph.nodes,\\n        edges: store.getState().graph.edges,\\n        visibleNodes: store.getState().visibleGraph.present.visibleNodes,\\n        visibleEdges: store.getState().visibleGraph.present.visibleEdges,\\n        visibleNodeTypes: store.getState().visibleGraph.present.visibleNodeTypes,\\n        visibleEdgeTypes: store.getState().visibleGraph.present.visibleEdgeTypes\\n    };\\n}\\n\\nexport type Action =\\n    | SetVisibleNodes\\n    | SetVisibleEdges\\n    | PullInNeighbors\\n    | HideNode\\n    | AddNode\\n    | RunMutatorFromNode\\n    | SetVisibleNodeTypes\\n    | SetVisibleEdgeTypes;\\n\",\"import * as React from 'react';\\nimport { Dimmer, Loader, Segment } from 'semantic-ui-react';\\n\\ninterface LoadingBarProps {\\n    text: string;\\n}\\n\\nconst LoadingBar: React.FunctionComponent<LoadingBarProps> = props => {\\n    return (\\n        <div>\\n            <Segment\\n                padded=\\\"very\\\"\\n                basic={true}\\n                className=\\\"container\\\"\\n                style={{\\n                    display: \\\"flex\\\",\\n                    justifyContent: \\\"center\\\",\\n                    alignItems: \\\"center\\\",\\n                    height: \\\"100vh\\\"\\n                }}\\n            >\\n                <Dimmer active={true} inverted={true}>\\n                    <Loader size=\\\"huge\\\">{props.text}</Loader>\\n                </Dimmer>\\n            </Segment>\\n        </div>\\n    );\\n};\\n\\nexport default LoadingBar;\\n\",\"import * as _ from 'lodash';\\n\\nexport function snakeToSpaced(word: string): string {\\n    return _.split(word, \\\"_\\\")\\n        .map(s => {\\n            if (s.length > 1) {\\n                const [first, ...rest] = Array.from(s);\\n                return [first.toUpperCase(), ...rest].join(\\\"\\\");\\n            } else {\\n                return s.toUpperCase();\\n            }\\n        })\\n        .join(\\\" \\\");\\n}\\n\",\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport {\\n    Label,\\n    List,\\n    Search,\\n    SearchCategoryProps,\\n    SearchProps,\\n    SearchResultData,\\n    SearchResultProps,\\n} from 'semantic-ui-react';\\nimport { setSelectedNode } from 'src/actions/selectedNode';\\nimport { addNode } from 'src/actions/visibleGraph';\\nimport { store } from 'src/App';\\nimport { snakeToSpaced } from 'src/common';\\nimport { Node } from 'src/models';\\n\\nexport interface NodeSearchProps {\\n    nodes: Node[];\\n}\\n\\nexport interface NodeSearchState {\\n    nodeTypes: string[];\\n    nodeColors: object;\\n    groupedNodes: object;\\n    isLoading: boolean;\\n    results: {};\\n    value: string;\\n}\\n\\nexport default class NodeSearch extends React.Component<NodeSearchProps, NodeSearchState> {\\n    public static getDerivedStateFromProps(props: NodeSearchProps, prevState: NodeSearchState) {\\n        const groupedNodes = _.groupBy(props.nodes, \\\"_node_type\\\");\\n        const nodeTypes = Object.keys(groupedNodes);\\n\\n        const nodeColors = {};\\n        _.toPairs(groupedNodes).map(([key, value]) => (nodeColors[key] = value[0].color));\\n\\n        return { ...prevState, groupedNodes, nodeTypes, nodeColors };\\n    }\\n\\n    public readonly state: NodeSearchState = {\\n        nodeTypes: [],\\n        groupedNodes: {},\\n        nodeColors: {},\\n        isLoading: false,\\n        results: {},\\n        value: \\\"\\\"\\n    };\\n\\n    public resetComponent = () => this.setState({ isLoading: false, results: {}, value: \\\"\\\" });\\n\\n    public handleResultSelect = (e: any, data: SearchResultData) => {\\n        this.setState({ value: data.result._display });\\n        store.dispatch(addNode(data.result.id));\\n        store.dispatch(setSelectedNode(data.result.id));\\n    };\\n\\n    public handleSearchChange = (e: any, data: SearchProps) => {\\n        this.setState({ isLoading: true, value: data.value === undefined ? \\\"\\\" : data.value });\\n\\n        setTimeout(() => {\\n            if (this.state.value.length < 1) {\\n                return this.resetComponent();\\n            }\\n\\n            // Convert search value into Regex\\n            const re = new RegExp(_.escapeRegExp(this.state.value), \\\"i\\\");\\n\\n            // Make a match against node objects, match against properties.\\n            const isMatch = (node: Node) => re.test(JSON.stringify(node.properties));\\n\\n            // Search for hits across nodes.\\n            const filteredResults = _.reduce(\\n                this.state.groupedNodes,\\n                (accum: object, nodes: Node[], nodeType: string) => {\\n                    const results = _.filter(nodes, isMatch);\\n\\n                    if (results.length) {\\n                        accum[nodeType] = { name: nodeType, results };\\n                    }\\n                    return accum;\\n                },\\n                {}\\n            );\\n\\n            this.setState({\\n                isLoading: false,\\n                results: filteredResults\\n            });\\n        }, 300);\\n    };\\n\\n    public resultsRender = (results: SearchResultProps) => {\\n        return (\\n            <div key={results.properties._key} style={{ wordBreak: \\\"break-all\\\" }}>\\n                <Label\\n                    content={results._display}\\n                    color=\\\"blue\\\"\\n                    style={{ display: \\\"flex\\\", justifyContent: \\\"center\\\" }}\\n                    size=\\\"large\\\"\\n                />\\n                {_.toPairs(results.properties).map(([key, value]: [string, string]) => {\\n                    return (\\n                        <List.Item key={key}>\\n                            <List.Content>\\n                                <b>{snakeToSpaced(key)}</b>:{\\\" \\\"}\\n                                {highlightText(value, this.state.value)}\\n                            </List.Content>\\n                        </List.Item>\\n                    );\\n                })}\\n            </div>\\n        );\\n    };\\n\\n    public categoryRender = (results: SearchCategoryProps) => {\\n        const category = results.name;\\n        return (\\n            <Label tag={true} style={{ backgroundColor: this.state.nodeColors[category || \\\"\\\"] }}>\\n                {category}\\n            </Label>\\n        );\\n    };\\n\\n    public render() {\\n        return (\\n            <Search\\n                input={{\\n                    fluid: true,\\n                    placeholder: \\\"Search for a node across all properties (min 3 characters).\\\"\\n                }}\\n                category={true}\\n                loading={this.state.isLoading}\\n                onResultSelect={this.handleResultSelect}\\n                onSearchChange={_.debounce(this.handleSearchChange, 500, { leading: true })}\\n                results={this.state.results}\\n                value={this.state.value}\\n                resultRenderer={this.resultsRender}\\n                categoryRenderer={this.categoryRender}\\n                fluid={true}\\n                minCharacters={3}\\n            />\\n        );\\n    }\\n}\\n// https://stackoverflow.com/a/47803998/3052228\\nconst highlightText = (text = \\\"\\\", highlight = \\\"\\\") => {\\n    if (text === null) {\\n        return text;\\n    }\\n\\n    if (!highlight.trim()) {\\n        return text.toString();\\n    }\\n    const regex = new RegExp(`(${_.escapeRegExp(highlight)})`, \\\"gi\\\");\\n    const parts = text.toString().split(regex);\\n    return parts\\n        .filter(part => part)\\n        .map((part, i) => (regex.test(part) ? <mark key={i}>{part}</mark> : part));\\n};\\n\",\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport { HorizontalGridLines, makeWidthFlexible, MarkSeries, VerticalGridLines, XAxis, XYPlot, YAxis } from 'react-vis';\\nimport { Edge } from 'src/models';\\n\\nexport interface EdgeTimeChartProps {\\n    edge: Edge;\\n    earliestEvent: Date;\\n    latestEvent: Date;\\n}\\n\\nexport default class EdgeTimeChart extends React.Component<EdgeTimeChartProps, any> {\\n    public constructor(props: EdgeTimeChartProps) {\\n        super(props);\\n        this.state = {\\n            valuke: null\\n        };\\n    }\\n\\n    public setHintValue = (value: any) => {\\n        this.setState({ value: \\\"foo\\\" });\\n    };\\n\\n    public resetHintValue = () => {\\n        this.setState({ value: null });\\n    };\\n\\n    public render() {\\n        if (this.props.edge === undefined) {\\n            return \\\"\\\";\\n        } else {\\n            const counts = _.countBy(this.props.edge.properties.data, \\\"timestamp\\\");\\n\\n            const data = _.toPairs(counts).map(m => {\\n                const date = new Date(0);\\n                date.setUTCSeconds(Number(m[0]));\\n                return {\\n                    x: date,\\n                    y: m[1]\\n                };\\n            });\\n\\n            const XYPlotFlex = makeWidthFlexible(XYPlot);\\n            return (\\n                <XYPlotFlex\\n                    xType=\\\"time\\\"\\n                    xDomain={[this.props.earliestEvent, this.props.latestEvent]}\\n                    height={300}\\n                    margin={{ bottom: 70 }}\\n                >\\n                    <HorizontalGridLines />\\n                    <VerticalGridLines />\\n                    <XAxis title=\\\"Time\\\" tickLabelAngle={-45} />\\n                    <YAxis />\\n                    <MarkSeries data={_.sortBy([...data], \\\"x\\\")} />\\n                </XYPlotFlex>\\n            );\\n        }\\n    }\\n}\\n\\n// // Returns an array of dates between the two dates\\n// const getDatesBetween = (startDate: Date, endDate: Date) => {\\n//     const dates = [];\\n\\n//     // Strip hours minutes seconds etc.\\n\\n//     let currentDate = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());\\n\\n//     while (currentDate <= endDate) {\\n//         dates.push(currentDate);\\n\\n//         currentDate = new Date(\\n//             currentDate.getFullYear(),\\n//             currentDate.getMonth(),\\n//             currentDate.getDate() + 1 // Will increase month if over range\\n//         );\\n//     }\\n\\n//     return dates;\\n// };\\n\",\"import * as React from 'react';\\nimport { Header, Table } from 'semantic-ui-react';\\nimport { snakeToSpaced } from 'src/common';\\nimport { Node } from 'src/models';\\n\\ninterface Props {\\n    node: Node;\\n}\\n\\nexport default class NodeInfoTable extends React.Component<Props, {}> {\\n    constructor(props: Props) {\\n        super(props);\\n    }\\n\\n    public render() {\\n        const node = this.props.node;\\n\\n        if (node === undefined) {\\n            return (\\n                <Header as=\\\"h3\\\" className=\\\"centered\\\">\\n                    Click a node to view information\\n                </Header>\\n            );\\n        } else {\\n            return (\\n                <Table celled={true} striped={true} columns={2}>\\n                    <Table.Header>\\n                        <Table.Row>\\n                            <Table.HeaderCell\\n                                colSpan=\\\"2\\\"\\n                                textAlign=\\\"center\\\"\\n                                style={{ backgroundColor: node.color }}\\n                            >\\n                                <Header>{node._display}</Header>\\n                            </Table.HeaderCell>\\n                        </Table.Row>\\n                        <Table.Row>\\n                            <Table.HeaderCell>Key</Table.HeaderCell>\\n                            <Table.HeaderCell>Value</Table.HeaderCell>\\n                        </Table.Row>\\n                        {Object.keys(node.properties).map((key: string, index: number) => (\\n                            <Table.Row key={index}>\\n                                <Table.Cell>{snakeToSpaced(key)}</Table.Cell>\\n                                <Table.Cell style={{ wordBreak: \\\"break-all\\\" }}>\\n                                    {/* JSON Stringify any null or empty objects */\\n                                    node.properties[key] === null ||\\n                                    typeof node.properties[key] === \\\"object\\\"\\n                                        ? JSON.stringify(node.properties[key])\\n                                        : node.properties[key]}\\n                                </Table.Cell>\\n                            </Table.Row>\\n                        ))}\\n                    </Table.Header>\\n                </Table>\\n            );\\n        }\\n    }\\n}\\n\",\"import * as React from 'react';\\nimport { Grid } from 'semantic-ui-react';\\n\\nexport interface VisibleScopeProps {\\n    visibleNodes: number;\\n    visibleEdges: number;\\n    nodes: number;\\n    edges: number;\\n    earliestEvent: Date;\\n    latestEvent: Date;\\n}\\n\\nexport default class VisibleScope extends React.Component<VisibleScopeProps, any> {\\n    public render() {\\n        let earliestTime = JSON.stringify(this.props.earliestEvent);\\n        let latestTime = JSON.stringify(this.props.latestEvent);\\n        if (\\n            this.props.earliestEvent.toString() === \\\"Invalid Date\\\" &&\\n            this.props.latestEvent.toString() === \\\"Invalid Date\\\"\\n        ) {\\n            earliestTime = \\\" No Timestamps \\\";\\n            latestTime = \\\" No Timestamps \\\";\\n        }\\n\\n        return (\\n            <Grid columns={\\\"equal\\\"}>\\n                <Grid.Row centered={true}>\\n                    <Grid.Column>\\n                        {`Visible Nodes: ${this.props.visibleNodes}`}\\n                        <br />\\n                        {`Visible Edges: ${this.props.visibleEdges}`}\\n                    </Grid.Column>\\n                    <Grid.Column>\\n                        {`Total Nodes: ${this.props.nodes}`}\\n                        <br />\\n                        {`Total Edges: ${this.props.edges}`}\\n                    </Grid.Column>\\n                </Grid.Row>\\n                <Grid.Row>\\n                    <Grid.Column width={16}>\\n                        {`Earliest Event: ${earliestTime.slice(1, earliestTime.length - 1)}`}\\n                        <br />\\n                        {`Latest Event: ${latestTime.slice(1, latestTime.length - 1)}`}\\n                    </Grid.Column>\\n                </Grid.Row>\\n            </Grid>\\n        );\\n    }\\n}\\n\",\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport { Accordion, Divider, Header, Icon, Segment, Table } from 'semantic-ui-react';\\nimport { SetSelectedEdge } from 'src/actions/selectedEdge';\\nimport { setSelectedNode } from 'src/actions/selectedNode';\\nimport { store } from 'src/App';\\nimport { snakeToSpaced } from 'src/common';\\nimport { Node } from 'src/models';\\n\\nimport { VizProps } from '.';\\n\\nexport default class EventTable extends React.PureComponent<VizProps, any> {\\n    public fieldsToTable = (properties: object) => {\\n        return (\\n            <Table className=\\\"centered\\\" compact={true}>\\n                {_.toPairs(properties).map(pair => (\\n                    <Table.Row>\\n                        <Table.Cell>{snakeToSpaced(pair[0])}</Table.Cell>\\n                        <Table.Cell>\\n                            {typeof pair[1] === \\\"string\\\"\\n                                ? snakeToSpaced(pair[1])\\n                                : JSON.stringify(pair[1])}\\n                        </Table.Cell>\\n                    </Table.Row>\\n                ))}\\n            </Table>\\n        );\\n    };\\n\\n    public handleNodeClick = (id: number) => {\\n        return (e: any) => {\\n            store.dispatch(setSelectedNode(id));\\n        };\\n    };\\n\\n    public handleEgeClick = (id: number) => {\\n        return (e: any) => {\\n            store.dispatch(SetSelectedEdge(id));\\n        };\\n    };\\n\\n    public makeNodesTable = () => {\\n        return (\\n            <Table selectable={true} celled={true} sortable={true}>\\n                <Table.Header>\\n                    <Table.HeaderCell>Node Type</Table.HeaderCell>\\n                    <Table.HeaderCell>Display</Table.HeaderCell>\\n                </Table.Header>\\n                <Table.Body>\\n                    {this.props.visibleNodes.map(n => (\\n                        <Table.Row onClick={this.handleNodeClick(n.id)} key={n.id}>\\n                            <Table.Cell>{n._node_type}</Table.Cell>\\n                            <Table.Cell>{n._display}</Table.Cell>\\n                        </Table.Row>\\n                    ))}\\n                </Table.Body>\\n            </Table>\\n        );\\n    };\\n\\n    public makeEdgesTable = (idsToNodes: object) => {\\n        return (\\n            <Table selectable={true} celled={true} sortable={true}>\\n                <Table.Header>\\n                    <Table.HeaderCell>From</Table.HeaderCell>\\n                    <Table.HeaderCell>To</Table.HeaderCell>\\n                    <Table.HeaderCell>Type</Table.HeaderCell>\\n                </Table.Header>\\n                <Table.Body>\\n                    {this.props.visibleEdges.map(e => (\\n                        <Table.Row onClick={this.handleEgeClick(e.id)} key={e.id}>\\n                            <Table.Cell>{idsToNodes[e.to]._display}</Table.Cell>\\n                            <Table.Cell>{idsToNodes[e.from]._display}</Table.Cell>\\n                            <Table.Cell>{e.label}</Table.Cell>\\n                        </Table.Row>\\n                    ))}\\n                </Table.Body>\\n            </Table>\\n        );\\n    };\\n\\n    public render() {\\n        const idsToNodes = this.props.visibleNodes.reduce((accum: object, node: Node) => {\\n            accum[node.id] = node;\\n            return accum;\\n        }, {});\\n\\n        return (\\n            <Segment style={{ height: \\\"92vh\\\", overflowY: \\\"auto\\\" }}>\\n                <Accordion\\n                    defaultActiveIndex={[0, 1, 2, 3, 4, 5, 6]}\\n                    exclusive={false}\\n                    panels={[\\n                        {\\n                            key: \\\"nodes_table\\\",\\n                            title: {\\n                                children: (\\n                                    <Divider horizontal={true}>\\n                                        <Header as=\\\"h3\\\">\\n                                            <Icon name=\\\"linode\\\" /> Nodes\\n                                        </Header>\\n                                    </Divider>\\n                                )\\n                            },\\n                            content: { children: this.makeNodesTable() }\\n                        },\\n                        {\\n                            key: \\\"nodes_table\\\",\\n                            title: {\\n                                children: (\\n                                    <Divider horizontal={true}>\\n                                        <Header as=\\\"h3\\\">\\n                                            <Icon name=\\\"arrows alternate horizontal\\\" /> Edges\\n                                        </Header>\\n                                    </Divider>\\n                                )\\n                            },\\n                            content: { children: this.makeEdgesTable(idsToNodes) }\\n                        }\\n                    ]}\\n                />\\n            </Segment>\\n        );\\n    }\\n}\\n\",\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport Timeline from 'react-visjs-timeline';\\nimport { Edge, Node } from 'src/models';\\nimport { TimelineGroup, TimelineItem } from 'vis';\\n\\ninterface EventTimelineProps {\\n    visibleNodes: Node[];\\n    visibleEdges: Edge[];\\n}\\n\\ninterface EventTimelineState {\\n    items: TimelineItem[];\\n    groups: TimelineGroup[];\\n}\\n\\nexport default class EventTimeline extends React.Component<EventTimelineProps, EventTimelineState> {\\n    public static getDerivedStateFromProps(props: EventTimelineProps) {\\n        let idx = 0;\\n\\n        function transformEdge(edge: Edge): TimelineItem[] | undefined {\\n            const targetNode = _.find(props.visibleNodes, { id: edge.to });\\n\\n            if (\\n                _.isNil(edge) ||\\n                _.isUndefined(targetNode) ||\\n                !(\\\"properties\\\" in edge) ||\\n                edge.properties.data.length === 0 // Edge with no data, for example, a file of edge.\\n            ) {\\n                return undefined;\\n            }\\n\\n            return edge.properties.data\\n                .filter(properties => !_.isNil(properties) && \\\"timestamp\\\" in properties)\\n                .map(edgeInfo => {\\n                    const date = new Date(0);\\n                    date.setUTCSeconds(edgeInfo.timestamp);\\n\\n                    return {\\n                        id: idx++,\\n                        content: targetNode._display + \\\" <span>(\\\" + edge.label + \\\")</span>\\\",\\n                        start: date,\\n                        group: edge.label,\\n                        style: \\\"background-color: \\\" + targetNode.color\\n                    };\\n                });\\n        }\\n\\n        const items = _.compact(_.flattenDeep(props.visibleEdges.map(transformEdge)));\\n\\n        return {\\n            items,\\n            groups: _.map(_.uniq(_.map(items, \\\"group\\\")), (ele: string) => ({\\n                id: ele,\\n                content: ele\\n            }))\\n        };\\n    }\\n\\n    public el: vis.Timeline;\\n\\n    constructor(props: EventTimelineProps) {\\n        super(props);\\n\\n        this.state = {\\n            items: [],\\n            groups: []\\n        };\\n    }\\n\\n    public render() {\\n        return (\\n            <div style={{ paddingTop: \\\"5px\\\" }}>\\n                <Timeline\\n                    ref={(c: any) => (c === null ? this.el == null : (this.el = c.$el))}\\n                    items={this.state.items}\\n                    groups={this.state.groups}\\n                    options={{\\n                        width: \\\"100%\\\",\\n                        maxHeight: \\\"90vh\\\",\\n                        height: \\\"90vh\\\",\\n                        verticalScroll: true,\\n                        type: \\\"box\\\",\\n                        showCurrentTime: false\\n                    }}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\",\"export const GRAPH_VIZ_CONFIG = {\\n    nodes: {\\n        shape: \\\"circle\\\",\\n        shapeProperties: {\\n            borderDashes: [2, 0]\\n        },\\n        borderWidth: 2,\\n        color: {\\n            border: \\\"#fff\\\"\\n        },\\n        font: {\\n            size: 8\\n        },\\n        scaling: {\\n            label: {\\n                enabled: true\\n            }\\n        }\\n    },\\n    layout: {\\n        improvedLayout: false,\\n        hierarchical: false\\n    },\\n    edges: {\\n        color: {\\n            color: \\\"#A9A9A9\\\",\\n            inherit: false\\n        },\\n        font: {\\n            align: \\\"horizontal\\\"\\n        },\\n        smooth: true\\n    },\\n    physics: {\\n        solver: \\\"forceAtlas2Based\\\",\\n        forceAtlas2Based: {\\n            gravitationalConstant: -50,\\n            centralGravity: 0.01,\\n            springConstant: 0.08,\\n            springLength: 100,\\n            damping: 0.5,\\n            avoidOverlap: 0.5\\n        },\\n        adaptiveTimestep: true,\\n        stabilization: {\\n            iterations: 200,\\n            fit: true\\n        }\\n    },\\n    height: window.innerHeight * 0.965 + \\\"px\\\"\\n};\\n\\n// Tree Viz Settings\\nexport const TREE_VIZ_CONFIG = JSON.parse(JSON.stringify(GRAPH_VIZ_CONFIG));\\nTREE_VIZ_CONFIG.physics = false;\\nTREE_VIZ_CONFIG.layout.hierarchical = {\\n    enabled: true,\\n    sortMethod: \\\"directed\\\"\\n};\\n\",\"import * as _ from 'lodash';\\nimport Mutator from 'src/mutators';\\n\\nimport { Action, ActionTypes } from '../actions/visibleGraph';\\nimport { Edge, Node } from '../models';\\n\\nexport interface State {\\n    visibleNodes: Node[]; // Set of the currently visible nodes\\n    visibleEdges: Edge[]; // Set of the currently visible nodes\\n    visibleNodeTypes: string[];\\n    visibleEdgeTypes: string[];\\n    earliestEvent: Date;\\n    latestEvent: Date;\\n}\\n\\nexport const initialState: State = {\\n    visibleNodes: [],\\n    visibleEdges: [],\\n    visibleNodeTypes: [],\\n    visibleEdgeTypes: [],\\n    earliestEvent: new Date(0),\\n    latestEvent: new Date()\\n};\\n\\n// We only pull in 25 at a time.\\nexport const PULL_IN_LIMIT = 25;\\n\\nexport function updateVisibleEdges(nodes: Node[], edges: Edge[]) {\\n    const nodeIds = _.map(nodes, \\\"id\\\");\\n\\n    return edges.filter(e => _.includes(nodeIds, e.from) && _.includes(nodeIds, e.to));\\n}\\n\\nfunction pullInNeighbors(state: State, node: number, nodes: Node[], edges: Edge[]) {\\n    // Get all incoming or outgoing neighbors of this node.\\n    const candidates: number[] = Array.from(\\n        // Transform into a set to prevent duplicate IDs\\n        new Set(\\n            edges\\n                .filter(\\n                    (edge: Edge) =>\\n                        (edge.from === node || edge.to === node) &&\\n                        _.includes(state.visibleEdgeTypes, edge.label)\\n                )\\n                .reduce(\\n                    (accumulator: number[], edge: Edge) => accumulator.concat([edge.from, edge.to]),\\n                    []\\n                )\\n        )\\n    );\\n\\n    // Map to node objects.\\n    const nodesToAdd: Node[] = candidates.map(\\n        (nodeId: number): Node => nodes.filter(n => n.id === nodeId)[0]\\n    );\\n\\n    // Get only **new** nodes, don't add in ones we already have present.\\n    const newNodes: Node[] = nodesToAdd\\n        .reduce(\\n            (accumulator: Node[], newNode: Node): Node[] =>\\n                // Make sure this node is not already visible.\\n                state.visibleNodes.find((presentNode: Node) => newNode.id === presentNode.id) ===\\n                undefined\\n                    ? accumulator.concat([newNode])\\n                    : accumulator,\\n            []\\n        )\\n        .slice(0, PULL_IN_LIMIT);\\n\\n    return state.visibleNodes.concat(newNodes);\\n}\\n\\nfunction addSingleNode(state: State, node: number, nodes: Node[]) {\\n    const nodeObj = nodes.filter(n => n.id === node)[0];\\n\\n    const currentNodes: number[] = state.visibleNodes.map((n: Node) => n.id);\\n\\n    return currentNodes.indexOf(node) > -1 ? state.visibleNodes : [nodeObj, ...state.visibleNodes];\\n}\\n\\nfunction filterForVisibleNodes(state: State) {\\n    state.visibleNodes = state.visibleNodes.filter(n =>\\n        _.includes(state.visibleNodeTypes, n._node_type)\\n    );\\n\\n    const idsToNodes = state.visibleNodes.reduce((accum: object, node: Node) => {\\n        accum[node.id] = node;\\n        return accum;\\n    }, {});\\n\\n    state.visibleEdges = state.visibleEdges.filter(\\n        e =>\\n            _.includes(state.visibleEdgeTypes, e.label) &&\\n            _.has(idsToNodes, e.from) &&\\n            _.has(idsToNodes, e.to)\\n    );\\n\\n    return state;\\n}\\n\\nexport function reducer(state: State = initialState, action: Action) {\\n    let nextState: State = state;\\n\\n    switch (action.type) {\\n        case ActionTypes.SET_VISIBLE_NODES: {\\n            nextState = {\\n                ...state,\\n                visibleNodes: action.payload.nodes\\n            };\\n            break;\\n        }\\n\\n        case ActionTypes.SET_VISIBLE_EDGES: {\\n            nextState = {\\n                ...state,\\n                visibleEdges: action.payload.edges\\n            };\\n            break;\\n        }\\n\\n        case ActionTypes.PULL_IN_NEIGHBORS: {\\n            const nextVisibleNodes = pullInNeighbors(\\n                state,\\n                action.payload.node,\\n                action.nodes,\\n                action.edges\\n            );\\n\\n            const nextVisibleEdges = updateVisibleEdges(nextVisibleNodes, action.edges);\\n\\n            const [min, max] = findMinMax(\\n                _.flatMap(nextVisibleEdges, e => _.map(e.properties.data, \\\"timestamp\\\"))\\n            );\\n\\n            nextState = {\\n                ...state,\\n                // Pull in neighbors changes the set of visible nodes.\\n                visibleNodes: nextVisibleNodes,\\n                visibleEdges: nextVisibleEdges,\\n                latestEvent: stringToEpoch(max),\\n                earliestEvent: stringToEpoch(min)\\n            };\\n            break;\\n        }\\n\\n        case ActionTypes.HIDE_NODE: {\\n            const nextVisibleNodes = state.visibleNodes.filter(\\n                (visibleNode: Node) => visibleNode.id !== action.payload.node\\n            );\\n\\n            const nextVisibleEdges = updateVisibleEdges(nextVisibleNodes, state.visibleEdges);\\n            const [min, max] = findMinMax(\\n                _.flatMap(nextVisibleEdges, e => _.map(e.properties.data, \\\"timestamp\\\"))\\n            );\\n\\n            nextState = {\\n                ...state,\\n                // Pull in neighbors changes the set of visible nodes.\\n                visibleNodes: nextVisibleNodes,\\n                visibleEdges: nextVisibleEdges,\\n                latestEvent: stringToEpoch(max),\\n                earliestEvent: stringToEpoch(min)\\n            };\\n            break;\\n        }\\n\\n        case ActionTypes.ADD_NODE: {\\n            const nextVisibleNodes = addSingleNode(state, action.payload.node, action.nodes);\\n\\n            const nextVisibleEdges = updateVisibleEdges(nextVisibleNodes, action.edges);\\n\\n            const [min, max] = findMinMax(\\n                _.flatMap(nextVisibleEdges, e => _.map(e.properties.data, \\\"timestamp\\\"))\\n            );\\n\\n            nextState = {\\n                ...state,\\n                // Pull in neighbors changes the set of visible nodes.\\n                visibleNodes: nextVisibleNodes,\\n                visibleEdges: nextVisibleEdges,\\n                latestEvent: stringToEpoch(max),\\n                earliestEvent: stringToEpoch(min)\\n            };\\n            break;\\n        }\\n\\n        case ActionTypes.SET_VISIBLE_NODE_TYPES: {\\n            nextState = {\\n                ...state,\\n                visibleNodeTypes: action.payload.nodeTypes\\n            };\\n            break;\\n        }\\n\\n        case ActionTypes.SET_VISIBLE_EDGE_TYPES: {\\n            nextState = {\\n                ...state,\\n                visibleEdgeTypes: action.payload.edgeTypes\\n            };\\n            break;\\n        }\\n\\n        case ActionTypes.RUN_MUTATOR_FROM_NODE: {\\n            const mutator: Mutator = action.mutator;\\n\\n            const { visibleNodes, visibleEdges } = mutator.mutate(\\n                action.visibleNodes,\\n                action.visibleEdges,\\n                action.visibleNodeTypes,\\n                action.visibleEdgeTypes,\\n                action.nodes,\\n                action.edges,\\n                action.selectedNode\\n            );\\n\\n            const [min, max] = findMinMax(\\n                _.flatMap(visibleEdges, e => _.map(e.properties.data, \\\"timestamp\\\"))\\n            );\\n\\n            nextState = {\\n                ...state,\\n                visibleEdges,\\n                visibleNodes,\\n                latestEvent: stringToEpoch(max),\\n                earliestEvent: stringToEpoch(min)\\n            };\\n            break;\\n        }\\n\\n        default: {\\n            nextState = state;\\n            break;\\n        }\\n    }\\n\\n    return filterForVisibleNodes(nextState);\\n}\\n\\nfunction findMinMax(arr: any) {\\n    let min = arr[0];\\n    let max = arr[0];\\n\\n    for (let i = 1, len = arr.length; i < len; i++) {\\n        const v = arr[i];\\n        min = v < min ? v : min;\\n        max = v > max ? v : max;\\n    }\\n\\n    return [min, max];\\n}\\n\\nfunction stringToEpoch(timeStr: string) {\\n    const d = new Date(0);\\n    d.setUTCSeconds(Number(timeStr));\\n    return d;\\n}\\n\",\"import * as _ from 'lodash';\\nimport { Edge, Node } from 'src/models';\\nimport { updateVisibleEdges } from 'src/reducers/visibleGraph';\\n\\nimport Mutator from '..';\\n\\nexport default class BackwardTravel implements Mutator {\\n    public name = \\\"Backward Fanout\\\";\\n    public category = \\\"Traversal\\\";\\n\\n    public mutate = (\\n        visibleNodes: Node[],\\n        visibleEdges: Edge[],\\n        visibleNodeTypes: string[],\\n        visibleEdgeTypes: string[],\\n        nodes: Node[],\\n        edges: Edge[],\\n        selectedNode: number\\n    ) => {\\n        if (selectedNode === undefined) {\\n            return { visibleNodes, visibleEdges };\\n        }\\n\\n        const queue: number[] = [selectedNode];\\n        const nodesToAdd: number[] = [];\\n\\n        while (queue.length !== 0) {\\n            const curr = queue.pop();\\n            const candidates = edges\\n                .filter(e => e.to === curr)\\n                .filter(e => _.includes(visibleEdgeTypes, e.label))\\n                .map(e => e.from)\\n                .filter(n => !_.includes(nodesToAdd, n));\\n\\n            // Add to the list of nodes to add\\n            candidates.forEach(n => nodesToAdd.push(n));\\n\\n            // Add elements to the queue\\n            candidates.filter(n => !_.includes(queue, n)).forEach(n => queue.push(n));\\n        }\\n\\n        // Remove null elements\\n        const newNodes = nodesToAdd.map(n => _.find(nodes, { id: n }));\\n\\n        // Set the new visibleNodes\\n        visibleNodes = _.uniqBy([...visibleNodes, ..._.compact(newNodes)], \\\"id\\\");\\n\\n        // Update the visible edges.\\n        visibleEdges = _.uniqBy(\\n            [...visibleEdges, ...updateVisibleEdges(visibleNodes, edges)],\\n            \\\"id\\\"\\n        );\\n\\n        return { visibleNodes, visibleEdges };\\n    };\\n}\\n\",\"import { Network } from 'vis';\\n\\nlet network: Network;\\n\\nexport const initVisjsControl = (visJSNetwork: Network): void => {\\n    network = visJSNetwork;\\n};\\n\\nexport const getNodeAt = (event: vis.Position) => {\\n    return network.getNodeAt(event);\\n};\\n\\nexport const freezeGraph = () => {\\n    network.stopSimulation();\\n};\\n\\nexport const highlightNode = (node: number) => {\\n    network.selectNodes([node]);\\n};\\n\",\"import * as _ from 'lodash';\\nimport { Edge, Node } from 'src/models';\\nimport { updateVisibleEdges } from 'src/reducers/visibleGraph';\\n\\nimport Mutator from '..';\\n\\nexport default class ForwardTravel implements Mutator {\\n    public name = \\\"Forward Fanout\\\";\\n    public category = \\\"Traversal\\\";\\n\\n    public mutate = (\\n        visibleNodes: Node[],\\n        visibleEdges: Edge[],\\n        visibleNodeTypes: string[],\\n        visibleEdgeTypes: string[],\\n        nodes: Node[],\\n        edges: Edge[],\\n        selectedNode: number\\n    ) => {\\n        if (selectedNode === undefined) {\\n            return { visibleNodes, visibleEdges };\\n        }\\n\\n        const queue: number[] = [selectedNode];\\n        const nodesToAdd: number[] = [];\\n\\n        while (queue.length !== 0) {\\n            const curr = queue.pop();\\n            const candidates = edges\\n                .filter(e => e.from === curr)\\n                .filter(e => _.includes(visibleEdgeTypes, e.label))\\n                .map(e => e.to)\\n                .filter(n => !_.includes(nodesToAdd, n));\\n\\n            // Add to the list of nodes to add\\n            candidates.forEach(n => nodesToAdd.push(n));\\n\\n            // Add elements to the queue\\n            candidates.filter(n => !_.includes(queue, n)).forEach(n => queue.push(n));\\n        }\\n\\n        // Remove null elements\\n        const newNodes = nodesToAdd.map(n => _.find(nodes, { id: n }));\\n\\n        // Set the new visibleNodes\\n        visibleNodes = _.uniqBy([...visibleNodes, ..._.compact(newNodes)], \\\"id\\\");\\n\\n        // Update the visible edges.\\n        visibleEdges = _.uniqBy(\\n            [...visibleEdges, ...updateVisibleEdges(visibleNodes, edges)],\\n            \\\"id\\\"\\n        );\\n\\n        return { visibleNodes, visibleEdges };\\n    };\\n}\\n\",\"import * as React from 'react';\\nimport { ContextMenu as RContextMenu, ContextMenuTrigger, MenuItem } from 'react-contextmenu';\\nimport { runMutatorFromNode } from 'src/actions/visibleGraph';\\nimport { store } from 'src/App';\\nimport BackwardTravel from 'src/mutators/traversals/backwardTravel';\\nimport ForwardTravel from 'src/mutators/traversals/forwardTravel';\\n\\nimport { getNodeAt } from './visjs-hook';\\n\\nexport interface ContextMenuProps {\\n    position: vis.Position;\\n}\\n\\nexport default class ContextMenu extends React.Component<ContextMenuProps, any> {\\n    public constructor(props: ContextMenuProps) {\\n        super(props);\\n    }\\n\\n    public runBackWardsTravel = () => {\\n        const nodeId = Number(getNodeAt(this.props.position));\\n\\n        store.dispatch(runMutatorFromNode(nodeId, new BackwardTravel()));\\n    };\\n\\n    public runForwardsTravel = () => {\\n        const nodeId = Number(getNodeAt(this.props.position));\\n\\n        store.dispatch(runMutatorFromNode(nodeId, new ForwardTravel()));\\n    };\\n\\n    public render() {\\n        return (\\n            <ContextMenuTrigger id=\\\"graph_context_menu\\\">\\n                {this.props.children}\\n                <RContextMenu id=\\\"graph_context_menu\\\">\\n                    <MenuItem onClick={this.runBackWardsTravel}>Backtrack Node</MenuItem>\\n                    <MenuItem onClick={this.runForwardsTravel}>Show all descendents</MenuItem>\\n                </RContextMenu>\\n            </ContextMenuTrigger>\\n        );\\n    }\\n}\\n\",\"import * as React from 'react';\\nimport { hideMenu } from 'react-contextmenu/modules/actions';\\nimport Graph from 'react-graph-vis';\\nimport { SetSelectedEdge } from 'src/actions/selectedEdge';\\nimport { setSelectedNode } from 'src/actions/selectedNode';\\nimport { hideNode, pullInNeighbors } from 'src/actions/visibleGraph';\\nimport { store } from 'src/App';\\n\\nimport { GraphEvent, VizProps } from '.';\\nimport { GRAPH_VIZ_CONFIG } from '../config';\\nimport ContextMenu from '../ContextMenu';\\nimport { freezeGraph, initVisjsControl } from '../visjs-hook';\\n\\nexport default class ForceGraph extends React.Component<VizProps> {\\n    public state: vis.Position;\\n\\n    constructor(props: VizProps) {\\n        super(props);\\n    }\\n\\n    public onClick = (event: GraphEvent) => {\\n        const { nodes, edges } = event;\\n\\n        // Hide the child context menu.\\n        hideMenu();\\n\\n        if (nodes.length !== 0) {\\n            store.dispatch(setSelectedNode(nodes[0]));\\n        } else if (edges.length !== 0) {\\n            store.dispatch(SetSelectedEdge(edges[0]));\\n        }\\n    };\\n\\n    public onDoubleClick = (event: GraphEvent) => {\\n        const nodes = event.nodes;\\n\\n        if (nodes.length === 0) {\\n            return;\\n        }\\n\\n        store.dispatch(pullInNeighbors(nodes[0]));\\n    };\\n\\n    public onHold = (event: GraphEvent) => {\\n        const nodes = event.nodes;\\n\\n        if (nodes.length === 0) {\\n            return;\\n        }\\n\\n        store.dispatch(hideNode(nodes[0]));\\n    };\\n\\n    public onRightClick = (clickEvent: { pointer: { DOM: { x: number; y: number } } }) => {\\n        this.setState(clickEvent.pointer.DOM);\\n        freezeGraph();\\n        return true;\\n    };\\n\\n    public render() {\\n        return (\\n            <ContextMenu position={this.state}>\\n                <Graph\\n                    key=\\\"graph\\\"\\n                    // Make graph work on parents nodes.\\n                    graph={{\\n                        edges: this.props.visibleEdges,\\n                        nodes: this.props.visibleNodes\\n                    }}\\n                    getNetwork={initVisjsControl}\\n                    options={GRAPH_VIZ_CONFIG}\\n                    events={{\\n                        click: this.onClick,\\n                        doubleClick: this.onDoubleClick,\\n                        hold: this.onHold,\\n                        oncontext: this.onRightClick\\n                    }}\\n                />\\n            </ContextMenu>\\n        );\\n    }\\n}\\n\",\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport { Button, Divider, Segment, Select } from 'semantic-ui-react';\\nimport { Node } from 'src/models';\\n\\nimport { VizProps } from '.';\\n\\ninterface MarkdownExportState {\\n    h3: string;\\n}\\n\\nconst styles = {\\n    Markdown: {\\n        h3: \\\"###\\\"\\n    },\\n    JIRA: {\\n        h3: \\\"h3. \\\"\\n    }\\n};\\n\\nexport default class MarkdownExport extends React.PureComponent<VizProps, MarkdownExportState> {\\n    constructor(props: any) {\\n        super(props);\\n\\n        this.state = {\\n            ...Object.values(styles)[0]\\n        };\\n    }\\n\\n    public copy = () => {\\n        const segment = document.getElementById(\\\"segment\\\");\\n\\n        if (segment === null) {\\n            return;\\n        } else {\\n            const textField = document.createElement(\\\"textarea\\\");\\n            textField.innerHTML = segment.innerText;\\n            document.body.appendChild(textField);\\n            textField.select();\\n            document.execCommand(\\\"copy\\\");\\n            textField.remove();\\n        }\\n    };\\n\\n    public nodesMDTable = () => {\\n        const nodeGroups = _.groupBy(this.props.visibleNodes, \\\"_node_type\\\");\\n\\n        return _.toPairs(nodeGroups).map(pair => (\\n            <div key={pair[0]}>\\n                <div>\\n                    {this.state.h3} {pair[0]}\\n                </div>\\n                <div>|{Object.keys(pair[1][0].properties).join(\\\"|\\\")}|</div>\\n                <div>\\n                    |\\n                    {Object.keys(pair[1][0].properties)\\n                        .map(__ => \\\"--\\\")\\n                        .join(\\\"|\\\")}\\n                    |\\n                </div>\\n                <div>\\n                    {pair[1].map(node => (\\n                        <div key={node.id}>\\n                            |\\n                            {Object.keys(node.properties)\\n                                .map(k =>\\n                                    typeof node.properties[k] === \\\"string\\\"\\n                                        ? node.properties[k].replace(\\\"|\\\", \\\"\\\\\\\\|\\\")\\n                                        : JSON.stringify(node.properties[k]).replace(\\\"|\\\", \\\"\\\\\\\\|\\\")\\n                                )\\n                                .join(\\\"|\\\")}\\n                            |\\n                        </div>\\n                    ))}\\n                </div>\\n                <br />\\n            </div>\\n        ));\\n    };\\n\\n    public edgesMDTable = () => {\\n        const idsToNodes = this.props.visibleNodes.reduce((accum: object, node: Node) => {\\n            accum[node.id] = node;\\n            return accum;\\n        }, {});\\n\\n        let edges = _.flatten(\\n            this.props.visibleEdges.map(e =>\\n                e.properties.data.length > 0\\n                    ? e.properties.data.map(props => {\\n                          const timeVar = new Date(0);\\n                          let timestamp = _.get(props, \\\"timestamp\\\", -1);\\n\\n                          if (timestamp !== -1 && timestamp !== \\\"null\\\") {\\n                              timeVar.setUTCSeconds(timestamp);\\n                              timestamp = JSON.stringify(timeVar);\\n                          } else {\\n                              timestamp = JSON.stringify(\\\"Unknown\\\");\\n                          }\\n\\n                          return {\\n                              from: e.from,\\n                              to: e.to,\\n                              type: e.label,\\n                              data: JSON.stringify(_.omit(props, \\\"timestamp\\\")).replace(\\\"|\\\", \\\"\\\\\\\\|\\\"),\\n                              timestamp: timestamp.slice(1, timestamp.length - 1)\\n                          };\\n                      })\\n                    : [\\n                          {\\n                              from: e.from,\\n                              to: e.to,\\n                              type: e.label,\\n                              data: JSON.stringify({}),\\n                              timestamp: \\\"-1\\\"\\n                          }\\n                      ]\\n            )\\n        );\\n\\n        edges = _.sortBy(\\n            edges.map(e => ({\\n                ...e,\\n                to: idsToNodes[e.to]._display,\\n                from: idsToNodes[e.from]._display\\n            })),\\n            \\\"timestamp\\\"\\n        );\\n\\n        return (\\n            <div>\\n                <div>{this.state.h3} Edges</div>\\n                <div>|{Object.keys(edges[0]).join(\\\"|\\\")}|</div>\\n                <div>\\n                    |\\n                    {Object.keys(edges[0])\\n                        .map(__ => \\\"--\\\")\\n                        .join(\\\"|\\\")}\\n                    |\\n                </div>\\n                {edges.map((e, idx) => (\\n                    <div key={idx}>|{Object.values(e).join(\\\"|\\\")}|</div>\\n                ))}\\n            </div>\\n        );\\n    };\\n\\n    public handleSyntaxChange = (event: React.SyntheticEvent, data: { value: string }) => {\\n        const nextState = styles[data.value];\\n        this.setState(nextState);\\n    };\\n    public render() {\\n        return (\\n            <Segment key=\\\"segment\\\" style={{ height: \\\"92vh\\\", overflowY: \\\"auto\\\" }}>\\n                <Button\\n                    primary={true}\\n                    key=\\\"btn\\\"\\n                    icon=\\\"copy\\\"\\n                    onClick={this.copy}\\n                    content=\\\"Copy Table\\\"\\n                />\\n                <Select\\n                    style={{ float: \\\"right\\\" }}\\n                    onChange={this.handleSyntaxChange}\\n                    options={Object.keys(styles).map(entry => ({\\n                        key: entry,\\n                        text: entry,\\n                        value: entry\\n                    }))}\\n                    placeholder=\\\"Choose markdown syntax\\\"\\n                />\\n                <Divider />\\n                <div id=\\\"segment\\\">\\n                    <div>{this.props.visibleNodes.length > 0 && this.nodesMDTable()}</div>\\n                    <div>{this.props.visibleEdges.length > 0 && this.edgesMDTable()}</div>\\n                </div>\\n            </Segment>\\n        );\\n    }\\n}\\n\",\"import * as React from 'react';\\nimport Graph from 'react-graph-vis';\\n\\nimport { VizProps } from '.';\\nimport { TREE_VIZ_CONFIG } from '../config';\\n\\nexport default class TreeGraph extends React.Component<VizProps, any> {\\n    public render() {\\n        return (\\n            <Graph\\n                graph={{\\n                    edges: this.props.visibleEdges,\\n                    nodes: this.props.visibleNodes\\n                }}\\n                options={TREE_VIZ_CONFIG}\\n            />\\n        );\\n    }\\n}\\n\",\"import { Form } from 'formsy-semantic-ui-react';\\nimport * as React from 'react';\\nimport Dropzone from 'react-dropzone';\\nimport { Redirect } from 'react-router';\\nimport { Button, Checkbox, Container, Header, Icon, Message, Popup, Segment, Step } from 'semantic-ui-react';\\nimport { snakeToSpaced } from 'src/common';\\nimport LoadingBar from 'src/components/misc/LoadingBar';\\n\\ninterface Transformer {\\n    id: string;\\n    name: string;\\n}\\n\\ninterface Backend {\\n    id: string;\\n    name: string;\\n}\\n\\ninterface DataSourceEntry {\\n    id: string;\\n    name: string;\\n    params: Array<{ name: string; required: boolean; default: null | string }>;\\n    transformers: Transformer[];\\n    type: string;\\n}\\n\\nexport interface UploadProps {\\n    postRoute: string; // Where should this post to?\\n    postUploadHandler?: () => null; // What to do after upload\\n}\\n\\nexport interface UploadState {\\n    selectedDatasource: DataSourceEntry;\\n    selectedTransformer: Transformer;\\n    selectedBackend: Backend;\\n    isExternal: boolean;\\n    comment: string;\\n    params: Array<{ name: string; required: boolean; default: null | string }>;\\n    formParams: { [name: string]: string | File };\\n    ready: boolean;\\n    errorMessage: string;\\n    graphRoute: string;\\n    redirect: boolean;\\n    steps: { [name: string]: { active: boolean; done: boolean; link?: string } };\\n    processing: boolean;\\n    advancedVisible: boolean;\\n}\\n\\nexport default class Upload extends React.Component<UploadProps, UploadState> {\\n    public pipelines: DataSourceEntry[];\\n    public backends: Backend[];\\n\\n    constructor(props: UploadProps) {\\n        super(props);\\n\\n        this.pipelines = [];\\n        this.backends = [];\\n\\n        this.state = {\\n            ready: false,\\n            comment: \\\"\\\",\\n            isExternal: false,\\n            selectedDatasource: {} as DataSourceEntry,\\n            selectedTransformer: {} as Transformer,\\n            // By default use NetworkX\\n            selectedBackend: { id: \\\"NetworkX\\\", name: \\\"NetworkX\\\" },\\n            params: [],\\n            formParams: {},\\n            graphRoute: \\\"\\\",\\n            redirect: false,\\n            errorMessage: \\\"\\\",\\n            steps: {\\n                upload: { active: true, done: false },\\n                transform: { active: false, done: false },\\n                view: { active: false, done: false }\\n            },\\n            processing: false,\\n            advancedVisible: false\\n        };\\n    }\\n\\n    public componentWillMount() {\\n        // Get the list of data sources to present in the form.\\n        fetch(\\n            `${\\n                process.env.NODE_ENV === \\\"production\\\" ? \\\"\\\" : \\\"http://localhost:8000\\\"\\n            }/api/datasources`\\n        )\\n            .then(resp => resp.json())\\n            .then(json => {\\n                if (json === undefined) {\\n                    return;\\n                }\\n\\n                this.pipelines = json.datasources;\\n                this.backends = json.backends;\\n\\n                const firstDataSource = this.pipelines[0];\\n\\n                const isExternal = firstDataSource.type === \\\"external\\\";\\n\\n                this.setState({\\n                    selectedDatasource: firstDataSource,\\n                    selectedTransformer: firstDataSource.transformers[0],\\n                    params: firstDataSource.params,\\n                    ready: true,\\n                    isExternal\\n                });\\n            });\\n    }\\n\\n    public setActiveTranformer = (e: any, target: any) => {\\n        this.setState({\\n            selectedTransformer: target.value\\n        });\\n    };\\n    public setActiveBackend = (e: any, target: any) => {\\n        this.setState({\\n            selectedBackend: target.value\\n        });\\n    };\\n\\n    public handleToggleAdvanced = () => {\\n        this.setState({\\n            advancedVisible: !this.state.advancedVisible\\n        });\\n    };\\n    public updateTransformers = (e: any, target: any) => {\\n        this.setState({\\n            selectedDatasource: target.value,\\n            selectedTransformer: target.value.transformers[0],\\n            params: target.value.params,\\n            isExternal: target.value.type === \\\"external\\\",\\n            formParams: {}\\n        });\\n    };\\n\\n    public handleCommentChange = (e: any, data: any) => {\\n        this.setState({ comment: data.value });\\n    };\\n\\n    public onDrop = (filename: string) => {\\n        return (accepted: File[]) => {\\n            const current = this.state.formParams;\\n            current[filename] = accepted[0];\\n            this.setState({\\n                formParams: current\\n            });\\n        };\\n    };\\n\\n    public onParamChange = (paramName: string) => {\\n        return (e: any, data: any) => {\\n            const current = this.state.formParams;\\n            current[paramName] = data.value;\\n            this.setState({\\n                formParams: current\\n            });\\n        };\\n    };\\n\\n    public onSubmit = () => {\\n        const missing = this.state.params.filter(\\n            param =>\\n                param.required === true && !Object.keys(this.state.formParams).includes(param.name)\\n        );\\n\\n        if (missing.length > 0) {\\n            const missingNames = missing.map(s => snakeToSpaced(s.name.replace(\\\"_file\\\", \\\"\\\")));\\n\\n            this.setState({\\n                errorMessage: `The following parameters are required: ${missingNames.join(\\\", \\\")}`,\\n                graphRoute: \\\"\\\",\\n                processing: false,\\n                steps: {\\n                    upload: { active: true, done: false },\\n                    transform: { active: false, done: false },\\n                    view: { active: false, done: false }\\n                }\\n            });\\n            return;\\n        }\\n\\n        const formData = new FormData();\\n        formData.append(\\\"datasource\\\", this.state.selectedDatasource.id);\\n        formData.append(\\\"backend\\\", this.state.selectedBackend.id);\\n        formData.append(\\\"transformer\\\", this.state.selectedTransformer.id);\\n        formData.append(\\\"comment\\\", this.state.comment);\\n\\n        // Add in the parameters requiered by the transformer\\n        this.state.params.forEach(key => {\\n            if (this.state.formParams[key.name] !== undefined) {\\n                formData.append(key.name, this.state.formParams[key.name]);\\n            }\\n        });\\n\\n        this.setState({\\n            processing: true,\\n            errorMessage: \\\"\\\",\\n            graphRoute: \\\"\\\",\\n            steps: {\\n                upload: { active: true, done: true },\\n                transform: { active: true, done: false },\\n                view: { active: false, done: false }\\n            }\\n        });\\n\\n        fetch(\\n            `${\\n                process.env.NODE_ENV === \\\"production\\\" ? \\\"\\\" : \\\"http://localhost:8000\\\" // Point to localhost if not prod\\n            }/api${this.props.postRoute}`, // Use the props route.\\n            {\\n                method: \\\"POST\\\",\\n                body: formData\\n            }\\n        )\\n            .then(resp => resp.json())\\n            .then(json => {\\n                if (json.hasOwnProperty(\\\"message\\\")) {\\n                    this.setState({\\n                        errorMessage: `Error on parse: ${json.message}`,\\n                        graphRoute: \\\"\\\",\\n                        processing: false,\\n                        steps: {\\n                            upload: { active: true, done: false },\\n                            transform: { active: false, done: false },\\n                            view: { active: false, done: false }\\n                        }\\n                    });\\n                } else if (json.hasOwnProperty(\\\"resp\\\")) {\\n                    this.setState({\\n                        graphRoute: json.resp,\\n                        redirect: false,\\n                        processing: false,\\n                        steps: {\\n                            upload: { active: true, done: true },\\n                            transform: { active: true, done: true },\\n                            view: { active: true, done: true, link: json.resp }\\n                        }\\n                    });\\n                } else {\\n                    if (this.props.postUploadHandler !== undefined) {\\n                        this.props.postUploadHandler();\\n                    }\\n\\n                    this.setState({\\n                        processing: false,\\n                        graphRoute: json.self,\\n                        redirect: true,\\n                        steps: {\\n                            upload: { active: true, done: true },\\n                            transform: { active: true, done: true },\\n                            view: { active: true, done: false, link: json.self }\\n                        }\\n                    });\\n                }\\n            });\\n    };\\n\\n    public makeDropZones = () => {\\n        return this.state.params.map(param => (\\n            <Form.Field key={param.name} required={param.required} name={param.name}>\\n                <Dropzone multiple={false} onDrop={this.onDrop(param.name)}>\\n                    {({ getRootProps, getInputProps }) => (\\n                        <div {...getRootProps()}>\\n                            <input {...getInputProps()} />\\n                            <Segment placeholder={true}>\\n                                <Header icon={true}>\\n                                    <Icon name=\\\"file archive\\\" />\\n                                    {!(param.name in this.state.formParams)\\n                                        ? snakeToSpaced(param.name.replace(\\\"_file\\\", \\\"\\\"))\\n                                        : (this.state.formParams[param.name] as File).name}\\n                                </Header>\\n                                <Button primary={true}>Upload Data</Button>\\n                            </Segment>\\n                        </div>\\n                    )}\\n                </Dropzone>\\n            </Form.Field>\\n        ));\\n    };\\n\\n    public makeInputs = () => {\\n        return this.state.params.map(param => (\\n            <Form.Input\\n                name={param.name}\\n                key={param.name}\\n                placeholder={param.default}\\n                label={snakeToSpaced(param.name)}\\n                onChange={this.onParamChange(param.name)}\\n                required={param.required}\\n            />\\n        ));\\n    };\\n\\n    public makeSteps = () => {\\n        return (\\n            <Step.Group attached={\\\"top\\\"} widths={3}>\\n                <Step\\n                    completed={this.state.steps.upload.done}\\n                    active={this.state.steps.upload.active}\\n                >\\n                    <Icon name=\\\"upload\\\" />\\n                    <Step.Content>\\n                        <Step.Title>Upload Data</Step.Title>\\n                        <Step.Description>Select from available data sources.</Step.Description>\\n                    </Step.Content>\\n                </Step>\\n\\n                <Step\\n                    completed={this.state.steps.transform.done}\\n                    active={this.state.steps.transform.active}\\n                >\\n                    <Icon name=\\\"cogs\\\" />\\n                    <Step.Content>\\n                        <Step.Title>Transform</Step.Title>\\n                        <Step.Description>Transform Data</Step.Description>\\n                    </Step.Content>\\n                </Step>\\n\\n                <Step\\n                    completed={this.state.steps.view.done}\\n                    active={this.state.steps.view.active}\\n                    link={this.state.steps.view.link !== undefined}\\n                    href={this.state.steps.view.link}\\n                >\\n                    <Icon name=\\\"linode\\\" />\\n                    <Step.Content>\\n                        <Step.Title>View Graph</Step.Title>\\n                    </Step.Content>\\n                </Step>\\n            </Step.Group>\\n        );\\n    };\\n\\n    public render() {\\n        if (this.state.ready === false) {\\n            return <LoadingBar text=\\\"Loading Configurations\\\" />;\\n        } else {\\n            return (\\n                <Container\\n                    style={{\\n                        marginTop: \\\"50px\\\",\\n                        width: \\\"65%\\\"\\n                    }}\\n                >\\n                    {this.makeSteps()}\\n                    <Form className=\\\"attached fluid segment\\\">\\n                        <Form.Group widths=\\\"equal\\\">\\n                            <Form.Select\\n                                search={true}\\n                                name=\\\"datasource\\\"\\n                                label={\\n                                    <div>\\n                                        <Popup\\n                                            trigger={<Icon name=\\\"info circle\\\" />}\\n                                            content=\\\"Select the type of data you would like graphed.\\\"\\n                                        />\\n                                        <span\\n                                            style={{\\n                                                color: \\\"rgba(0,0,0,.87)\\\",\\n                                                fontSize: \\\".92857143em\\\",\\n                                                fontWeight: 700\\n                                            }}\\n                                        >\\n                                            Data Source\\n                                        </span>\\n                                    </div>\\n                                }\\n                                placeholder=\\\"Select Data Source\\\"\\n                                value={this.state.selectedDatasource}\\n                                options={this.pipelines.map(datasource => ({\\n                                    key: datasource.id,\\n                                    text: datasource.name,\\n                                    value: datasource\\n                                }))}\\n                                onChange={this.updateTransformers}\\n                            />\\n                            {this.state.advancedVisible &&\\n                                (this.state.selectedDatasource.transformers && (\\n                                    <Form.Select\\n                                        name=\\\"transformer\\\"\\n                                        label={\\n                                            <div>\\n                                                <Popup\\n                                                    trigger={<Icon name=\\\"info circle\\\" />}\\n                                                    content=\\\"Different transformers may produce different graphs\\\"\\n                                                />\\n                                                <span\\n                                                    style={{\\n                                                        color: \\\"rgba(0,0,0,.87)\\\",\\n                                                        fontSize: \\\".92857143em\\\",\\n                                                        fontWeight: 700\\n                                                    }}\\n                                                >\\n                                                    Transformer\\n                                                </span>\\n                                            </div>\\n                                        }\\n                                        placeholder=\\\"Select Transformer\\\"\\n                                        value={this.state.selectedTransformer}\\n                                        options={this.state.selectedDatasource.transformers.map(\\n                                            transformer => ({\\n                                                key: transformer.id,\\n                                                text: transformer.name,\\n                                                value: transformer\\n                                            })\\n                                        )}\\n                                        onChange={this.setActiveTranformer}\\n                                    />\\n                                ))}\\n                            {this.state.advancedVisible && (\\n                                <Form.Select\\n                                    name=\\\"backend\\\"\\n                                    label={\\n                                        <div>\\n                                            <Popup\\n                                                trigger={<Icon name=\\\"info circle\\\" />}\\n                                                content=\\\"Destination of the graph. NetworkX will use the web GUI.\\\"\\n                                            />\\n                                            <span\\n                                                style={{\\n                                                    color: \\\"rgba(0,0,0,.87)\\\",\\n                                                    fontSize: \\\".92857143em\\\",\\n                                                    fontWeight: 700\\n                                                }}\\n                                            >\\n                                                Backend\\n                                            </span>\\n                                        </div>\\n                                    }\\n                                    placeholder=\\\"Select Transformer\\\"\\n                                    value={this.state.selectedBackend}\\n                                    options={this.backends.map(backend => ({\\n                                        key: backend.id,\\n                                        text: backend.name,\\n                                        value: backend\\n                                    }))}\\n                                    onChange={this.setActiveBackend}\\n                                />\\n                            )}\\n                        </Form.Group>\\n                        <Form.TextArea\\n                            name=\\\"comment\\\"\\n                            label={\\\"Comment\\\"}\\n                            placeholder=\\\"\\\"\\n                            value={this.state.comment}\\n                            onChange={this.handleCommentChange}\\n                        />\\n\\n                        <Header textAlign=\\\"center\\\" as=\\\"h5\\\">\\n                            {this.state.isExternal\\n                                ? \\\"Input required parameters\\\"\\n                                : \\\"Upload Required Files\\\"}\\n                        </Header>\\n                        <Form.Group className=\\\"fluid\\\" widths=\\\"equal\\\">\\n                            {this.state.isExternal ? this.makeInputs() : this.makeDropZones()}\\n                        </Form.Group>\\n                        <Form.Field>\\n                            <Checkbox\\n                                onChange={this.handleToggleAdvanced}\\n                                checked={this.state.advancedVisible}\\n                                label=\\\"Show Advanced Options\\\"\\n                            />\\n                        </Form.Field>\\n                        <Button style={{ marginTop: \\\"1em\\\" }} color=\\\"blue\\\" onClick={this.onSubmit}>\\n                            Submit\\n                        </Button>\\n                    </Form>\\n                    {this.state.errorMessage !== \\\"\\\" && (\\n                        <Message\\n                            negative={true}\\n                            icon=\\\"warning sign\\\"\\n                            attached=\\\"bottom\\\"\\n                            header=\\\"Error\\\"\\n                            content={this.state.errorMessage}\\n                        />\\n                    )}\\n                    {this.state.graphRoute !== \\\"\\\" && [\\n                        <Message\\n                            key=\\\"msg\\\"\\n                            positive={true}\\n                            icon=\\\"lnode\\\"\\n                            attached=\\\"bottom\\\"\\n                            header=\\\"Graph succesfully created!\\\"\\n                            content={this.state.graphRoute}\\n                        />,\\n                        this.state.redirect && (\\n                            <Redirect key=\\\"redirect\\\" to={this.state.graphRoute} />\\n                        )\\n                    ]}\\n                    {this.state.processing && (\\n                        <Message info={true} icon={true} attached=\\\"bottom\\\">\\n                            <Icon name=\\\"circle notched\\\" loading={true} />\\n                            <Message.Content>\\n                                <Message.Header>Graphing data</Message.Header>\\n                            </Message.Content>\\n                        </Message>\\n                    )}\\n                </Container>\\n            );\\n        }\\n    }\\n}\\n\",\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport { Checkbox, CheckboxProps, Grid, Header, List } from 'semantic-ui-react';\\nimport { setVisibleEdgeTypes, setVisibleNodeTypes } from 'src/actions/visibleGraph';\\nimport { store } from 'src/App';\\nimport { Edge, Node } from 'src/models';\\n\\nexport interface VisibleTypeTogglesProps {\\n    nodes: Node[];\\n    edges: Edge[];\\n    visibleNodeTypes: string[];\\n    visibleEdgeTypes: string[];\\n}\\n\\nexport interface VisibleTypeTogglesState {\\n    allNodeTypes: Array<{ type: string; color: string }>;\\n    allEdgeTypes: string[];\\n}\\n\\nexport default class VisibleTypeToggles extends React.Component<\\n    VisibleTypeTogglesProps,\\n    VisibleTypeTogglesState\\n> {\\n    public static getDerivedStateFromProps(props: VisibleTypeTogglesProps) {\\n        return {\\n            allEdgeTypes: _.uniq(_.map(props.edges, \\\"label\\\")),\\n            allNodeTypes: _.uniqBy(\\n                _.map(props.nodes, n => ({ color: n.color, type: n._node_type })),\\n                \\\"type\\\"\\n            )\\n        };\\n    }\\n\\n    constructor(props: VisibleTypeTogglesProps) {\\n        super(props);\\n\\n        this.state = {\\n            allNodeTypes: [],\\n            allEdgeTypes: []\\n        };\\n    }\\n\\n    public toggleNodeVisiblity = (e: React.SyntheticEvent, props: CheckboxProps) => {\\n        // Cast to string\\n        const nodeType = String(props.value);\\n\\n        let nextNodeTypes = this.props.visibleNodeTypes;\\n\\n        // Check if we are removing or adding.\\n        if (props.checked) {\\n            nextNodeTypes = _.uniq([...nextNodeTypes, nodeType]);\\n        } else {\\n            nextNodeTypes = nextNodeTypes.filter(n => n !== nodeType);\\n        }\\n\\n        // Dispatch\\n        store.dispatch(setVisibleNodeTypes(nextNodeTypes));\\n    };\\n\\n    public toggleEdgeVisibility = (e: React.SyntheticEvent, props: CheckboxProps) => {\\n        // Cast to string\\n        const nodeType = String(props.value);\\n\\n        let nextEdgeTypes = this.props.visibleEdgeTypes;\\n\\n        // Check if we are removing or adding.\\n        if (props.checked) {\\n            nextEdgeTypes = _.uniq([...nextEdgeTypes, nodeType]);\\n        } else {\\n            nextEdgeTypes = nextEdgeTypes.filter(n => n !== nodeType);\\n        }\\n\\n        // Dispatch\\n        store.dispatch(setVisibleEdgeTypes(nextEdgeTypes));\\n    };\\n\\n    public render() {\\n        return (\\n            <Grid columns=\\\"equal\\\" textAlign=\\\"left\\\" divided={true}>\\n                <Grid.Column>\\n                    <Header as=\\\"h5\\\">Node Types</Header>\\n                    <List floated=\\\"left\\\">\\n                        {this.state.allNodeTypes.map(nodeType => (\\n                            <List.Item key={nodeType.type}>\\n                                {/* <Segment style={{ backgroundColor: nodeType.color }} basic={true}> */}\\n                                <Checkbox\\n                                    checked={_.includes(this.props.visibleNodeTypes, nodeType.type)}\\n                                    value={nodeType.type}\\n                                    onChange={this.toggleNodeVisiblity}\\n                                    label={nodeType.type}\\n                                />\\n                                {/* </Segment> */}\\n                            </List.Item>\\n                        ))}\\n                    </List>\\n                </Grid.Column>\\n                <Grid.Column>\\n                    <Header as=\\\"h5\\\">Edge Types</Header>\\n                    <List floated=\\\"left\\\">\\n                        {this.state.allEdgeTypes.map(edgeType => (\\n                            <List.Item key={edgeType}>\\n                                <Checkbox\\n                                    checked={_.includes(this.props.visibleEdgeTypes, edgeType)}\\n                                    value={edgeType}\\n                                    onChange={this.toggleEdgeVisibility}\\n                                    label={edgeType}\\n                                />\\n                            </List.Item>\\n                        ))}\\n                    </List>\\n                </Grid.Column>\\n            </Grid>\\n        );\\n    }\\n}\\n\",\"import * as React from 'react';\\nimport { connect } from 'react-redux';\\nimport { Dispatch } from 'redux';\\nimport { ActionCreators as UndoActionCreators } from 'redux-undo';\\nimport { Button } from 'semantic-ui-react';\\nimport { State } from 'src/reducers';\\n\\nexport interface GraphRedoUndoProps {\\n    onUndo: () => void;\\n    onRedo: () => void;\\n    onReset: () => void;\\n    canUndo: boolean;\\n    canRedo: boolean;\\n}\\n\\nclass GraphRedoUndo extends React.Component<GraphRedoUndoProps, any> {\\n    public render() {\\n        return (\\n            <div>\\n                <Button\\n                    key=\\\"undo\\\"\\n                    icon=\\\"undo\\\"\\n                    content=\\\"Undo\\\"\\n                    style={{ marginLeft: \\\"auto\\\" }}\\n                    attached=\\\"left\\\"\\n                    labelPosition=\\\"left\\\"\\n                    onClick={this.props.onUndo}\\n                    disabled={!this.props.canUndo}\\n                />\\n                <Button\\n                    key=\\\"redo\\\"\\n                    icon=\\\"redo\\\"\\n                    content=\\\"Redo\\\"\\n                    attached=\\\"right\\\"\\n                    style={{ marginLeft: \\\"auto\\\" }}\\n                    labelPosition=\\\"right\\\"\\n                    onClick={this.props.onRedo}\\n                    disabled={!this.props.canRedo}\\n                />\\n                <Button\\n                    key=\\\"reset\\\"\\n                    icon=\\\"eraser\\\"\\n                    content=\\\"Reset\\\"\\n                    style={{ float: \\\"right\\\" }}\\n                    negative={true}\\n                    labelPosition=\\\"right\\\"\\n                    onClick={this.props.onReset}\\n                    disabled={!this.props.canUndo}\\n                />\\n            </div>\\n        );\\n    }\\n}\\n\\nconst mapStateToProps = (state: State) => {\\n    return {\\n        // Makes it so that the graph is initialized\\n        canUndo: state.visibleGraph.past.length > 0,\\n        canRedo: state.visibleGraph.future.length > 0\\n    };\\n};\\n\\nconst mapDispatchToProps = (dispatch: Dispatch) => {\\n    return {\\n        onUndo: () => dispatch(UndoActionCreators.undo()),\\n        onRedo: () => dispatch(UndoActionCreators.redo()),\\n        // Reset by jumping to 0 and clearing the history.\\n        onReset: () => {\\n            dispatch(UndoActionCreators.jumpToPast(0));\\n        }\\n    };\\n};\\nexport default connect<any, any, any>(\\n    mapStateToProps,\\n    mapDispatchToProps\\n)(GraphRedoUndo);\\n\",\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport { connect } from 'react-redux';\\nimport { toastr } from 'react-redux-toastr';\\nimport { ActionCreators as UndoActionCreators } from 'redux-undo';\\nimport { Accordion, Divider, Grid, Header, Icon, SemanticICONS, Tab } from 'semantic-ui-react';\\nimport { setNodesAndEdges } from 'src/actions/graph';\\nimport { SetSelectedEdge } from 'src/actions/selectedEdge';\\nimport { setSelectedNode } from 'src/actions/selectedNode';\\nimport { store } from 'src/App';\\nimport LoadingBar from 'src/components/misc/LoadingBar';\\nimport NodeSearch from 'src/components/visualization/controls/NodeSearch';\\nimport EdgeInfoTable from 'src/components/visualization/panels/EdgeInfoTable';\\nimport EdgeTimeChart from 'src/components/visualization/panels/EdgeTimechart';\\nimport NodeInfoTable from 'src/components/visualization/panels/NodeInfoTable';\\nimport VisibleScope from 'src/components/visualization/panels/VisibleScope';\\nimport EventTable from 'src/components/visualization/prespectives/EventTable';\\nimport EventTimeline from 'src/components/visualization/prespectives/EventTimeline';\\nimport ForceGraph from 'src/components/visualization/prespectives/ForceGraph';\\nimport MarkdownExport from 'src/components/visualization/prespectives/MarkdownExport';\\nimport TreeGraph from 'src/components/visualization/prespectives/TreeGraph';\\nimport { Graph } from 'src/models/index.js';\\nimport { State } from 'src/reducers';\\nimport { PULL_IN_LIMIT } from 'src/reducers/visibleGraph';\\nimport Upload from 'src/views/Upload';\\n\\nimport {\\n    pullInNeighbors,\\n    setVisibleEdges,\\n    setVisibleEdgeTypes,\\n    setVisibleNodes,\\n    setVisibleNodeTypes,\\n} from '../actions/visibleGraph';\\nimport VisibleTypeToggles from '../components/visualization/controls/VisibleTypeToggles';\\nimport GraphRedoUndo from './GraphRedoUndo';\\n\\nconst EXLUDED_BY_DEFAULT = [\\\"Loaded\\\", \\\"File Of\\\"];\\n\\ninterface GraphPageState {\\n    ready: boolean;\\n}\\n\\nclass GraphPage extends React.Component<any, GraphPageState> {\\n    private tab: any; // sematnic-ui uses old refs, easier to type hint as any.\\n\\n    constructor(props: any) {\\n        super(props);\\n\\n        this.state = {\\n            ready: false\\n        };\\n    }\\n\\n    public componentDidUpdate(prevProps: any) {\\n        // Check if we pulled in the limit. If so, notify user.\\n        if (this.props.visibleNodes.length - prevProps.visibleNodes.length === PULL_IN_LIMIT) {\\n            toastr.warning(\\n                `Pull in limit (${PULL_IN_LIMIT}) reached`,\\n                \\\"Double click the node again to pull in more neighbours.\\\"\\n            );\\n        }\\n    }\\n\\n    public loadGraph() {\\n        fetch(\\n            `${process.env.NODE_ENV === \\\"production\\\" ? \\\"\\\" : \\\"http://localhost:8000\\\"}/api/graph/${\\n                this.props.match.params.id\\n            }`\\n        )\\n            .then(response => response.json())\\n            .then(graphJson => {\\n                const graph: Graph = {\\n                    directed: graphJson.directed,\\n                    edges: graphJson.links.map((link: any) => {\\n                        return {\\n                            from: link.source,\\n                            id: link.id,\\n                            label: link.type,\\n                            properties: link.properties,\\n                            to: link.target\\n                        };\\n                    }),\\n                    graph: graphJson.graph,\\n                    multigraph: graphJson.multigraph,\\n                    nodes: graphJson.nodes.map((node: any) => {\\n                        const newNode = Object.assign(node);\\n\\n                        // 15 = len(\\\"255.255.255.255\\\") ;\\n                        newNode.label = (node._display || \\\"\\\").substring(0, 15);\\n                        if (newNode.label.length === 15) {\\n                            newNode.label += \\\"...\\\";\\n                        }\\n\\n                        newNode.color = node._color;\\n                        return newNode;\\n                    })\\n                };\\n\\n                // Set the visible edge types\\n                store.dispatch(setVisibleNodeTypes(_.uniq(_.map(graph.nodes, \\\"_node_type\\\"))));\\n\\n                // Set the visible edge types, excluding what is off by default.\\n                store.dispatch(\\n                    setVisibleEdgeTypes(\\n                        _.uniq(_.map(graph.edges, \\\"label\\\")).filter(\\n                            edgeType => !_.includes(EXLUDED_BY_DEFAULT, edgeType)\\n                        )\\n                    )\\n                );\\n                store.dispatch(setNodesAndEdges(graph.nodes, graph.edges));\\n\\n                const alertNodes = graph.nodes.filter(n => n._node_type === \\\"Alert\\\");\\n\\n                if (alertNodes.length > 0) {\\n                    store.dispatch(setVisibleNodes([...alertNodes]));\\n                    alertNodes.map(node => store.dispatch(pullInNeighbors(node.id)));\\n                    store.dispatch(UndoActionCreators.clearHistory()); // Wipe state here\\n                } else {\\n                    // Set base state here\\n\\n                    const sample = _.sampleSize(graph.nodes, 10);\\n                    store.dispatch(setVisibleNodes(sample));\\n                    store.dispatch(pullInNeighbors(sample[0].id));\\n\\n                    store.dispatch(UndoActionCreators.clearHistory());\\n                }\\n\\n                this.setState({ ready: true });\\n            });\\n    }\\n\\n    public loadAndResetView() {\\n        this.tab.state.activeIndex = 0;\\n\\n        this.loadGraph();\\n\\n        toastr.info(\\\"Evidence added to graph\\\", `Uploaded artifact merged into graph.`, {\\n            timeOut: 10000\\n        });\\n    }\\n\\n    public componentWillMount() {\\n        this.loadGraph();\\n    }\\n\\n    public componentWillUnmount = () => {\\n        // Reset the graph on unmount.\\n        store.dispatch(setVisibleNodeTypes([]));\\n        store.dispatch(setVisibleEdgeTypes([]));\\n        store.dispatch(setNodesAndEdges([], []));\\n        store.dispatch(setVisibleNodes([]));\\n        store.dispatch(setVisibleEdges([]));\\n        store.dispatch(setSelectedNode(undefined));\\n        store.dispatch(SetSelectedEdge(undefined));\\n        store.dispatch(UndoActionCreators.clearHistory());\\n    };\\n\\n    public makeDivider(text: string, icon: SemanticICONS) {\\n        return (\\n            <Divider horizontal={true}>\\n                <Header as=\\\"h4\\\">\\n                    <Icon name={icon} />\\n                    {text}\\n                </Header>\\n            </Divider>\\n        );\\n    }\\n\\n    public render() {\\n        if (this.state.ready === false) {\\n            return <LoadingBar text=\\\"Fetching Graph Data\\\" />;\\n        }\\n\\n        return (\\n            <Grid columns={2} celled=\\\"internally\\\" padded={false}>\\n                <Grid.Column width={10}>\\n                    <Tab\\n                        ref={ref => (this.tab = ref)}\\n                        menu={{ color: \\\"black\\\", secondary: true, pointing: true, attached: \\\"top\\\" }}\\n                        panes={[\\n                            {\\n                                menuItem: \\\"Graph\\\",\\n                                render: () => (\\n                                    <ForceGraph\\n                                        visibleEdges={this.props.visibleEdges}\\n                                        visibleNodes={this.props.visibleNodes}\\n                                    />\\n                                )\\n                            },\\n                            {\\n                                menuItem: \\\"Tree\\\",\\n                                render: () => (\\n                                    <TreeGraph\\n                                        visibleEdges={this.props.visibleEdges}\\n                                        visibleNodes={this.props.visibleNodes}\\n                                    />\\n                                )\\n                            },\\n                            {\\n                                menuItem: \\\"Timeline\\\",\\n                                render: () => (\\n                                    <EventTimeline\\n                                        visibleEdges={this.props.visibleEdges}\\n                                        visibleNodes={this.props.visibleNodes}\\n                                    />\\n                                )\\n                            },\\n                            {\\n                                menuItem: \\\"Table\\\",\\n                                render: () => (\\n                                    <EventTable\\n                                        visibleEdges={this.props.visibleEdges}\\n                                        visibleNodes={this.props.visibleNodes}\\n                                    />\\n                                )\\n                            },\\n                            {\\n                                menuItem: \\\"Markdown\\\",\\n                                render: () => (\\n                                    <MarkdownExport\\n                                        visibleEdges={this.props.visibleEdges}\\n                                        visibleNodes={this.props.visibleNodes}\\n                                    />\\n                                )\\n                            },\\n                            {\\n                                menuItem: \\\"Add Evidence\\\",\\n                                render: () => (\\n                                    // Add evidence\\n                                    <Upload\\n                                        postRoute={`/add/${this.props.match.params.id}`}\\n                                        postUploadHandler={this.loadAndResetView.bind(this)}\\n                                    />\\n                                )\\n                            }\\n                        ]}\\n                    />\\n                </Grid.Column>\\n\\n                <Grid.Column\\n                    width={6}\\n                    stretched={false}\\n                    style={{ overflowY: \\\"auto\\\", maxHeight: \\\"100vh\\\" }}\\n                >\\n                    <Grid.Row centered={true}>\\n                        <VisibleScope\\n                            nodes={this.props.nodes.length}\\n                            edges={this.props.edges.length}\\n                            visibleNodes={this.props.visibleNodes.length}\\n                            visibleEdges={this.props.visibleEdges.length}\\n                            latestEvent={this.props.latestEvent}\\n                            earliestEvent={this.props.earliestEvent}\\n                        />\\n                    </Grid.Row>\\n                    {<br /> /* Empty row to force a newline? */}\\n                    <Grid.Row>\\n                        <Accordion\\n                            defaultActiveIndex={[0, 1, 2, 3, 4, 5, 6]}\\n                            exclusive={false}\\n                            panels={[\\n                                {\\n                                    key: \\\"node_search\\\",\\n                                    title: {\\n                                        children: this.makeDivider(\\\"Node Search\\\", \\\"search\\\")\\n                                    },\\n                                    content: { children: <NodeSearch nodes={this.props.nodes} /> }\\n                                },\\n                                {\\n                                    key: \\\"graph_controls\\\",\\n                                    title: {\\n                                        children: this.makeDivider(\\\"Graph Controls\\\", \\\"configure\\\")\\n                                    },\\n                                    content: { children: <GraphRedoUndo /> }\\n                                },\\n                                {\\n                                    key: \\\"node_visibility_controls\\\",\\n                                    title: {\\n                                        children: this.makeDivider(\\\"Node/Edge Visibility\\\", \\\"eye\\\")\\n                                    },\\n                                    content: {\\n                                        children: (\\n                                            <VisibleTypeToggles\\n                                                nodes={this.props.nodes}\\n                                                edges={this.props.edges}\\n                                                visibleEdgeTypes={this.props.visibleEdgeTypes}\\n                                                visibleNodeTypes={this.props.visibleNodeTypes}\\n                                            />\\n                                        )\\n                                    }\\n                                },\\n                                {\\n                                    key: \\\"node_info\\\",\\n                                    title: {\\n                                        children: this.makeDivider(\\\"Node Info\\\", \\\"info circle\\\")\\n                                    },\\n                                    content: {\\n                                        children: <NodeInfoTable node={this.props.selectedNode} />\\n                                    }\\n                                },\\n                                {\\n                                    key: \\\"edge_info\\\",\\n                                    title: {\\n                                        children: this.makeDivider(\\\"Edge Info\\\", \\\"info circle\\\")\\n                                    },\\n                                    content: {\\n                                        children: [\\n                                            <EdgeInfoTable\\n                                                key=\\\"table\\\"\\n                                                edge={this.props.selectedEdge}\\n                                            />,\\n                                            false && (\\n                                                <EdgeTimeChart\\n                                                    key=\\\"timechart\\\"\\n                                                    edge={this.props.selectedEdge}\\n                                                    latestEvent={this.props.latestEvent}\\n                                                    earliestEvent={this.props.earliestEvent}\\n                                                />\\n                                            )\\n                                        ]\\n                                    }\\n                                }\\n                            ]}\\n                        />\\n                    </Grid.Row>\\n                </Grid.Column>\\n            </Grid>\\n        );\\n    }\\n}\\n\\nconst mapStateToProps = (state: State) => ({\\n    visibleNodes: state.visibleGraph.present.visibleNodes,\\n    visibleEdges: state.visibleGraph.present.visibleEdges,\\n    selectedNode: state.selectedNode.node,\\n    selectedEdge: state.selectedEdge.edge,\\n    nodes: state.graph.nodes,\\n    edges: state.graph.edges,\\n    visibleNodeTypes: state.visibleGraph.present.visibleNodeTypes,\\n    visibleEdgeTypes: state.visibleGraph.present.visibleEdgeTypes,\\n    latestEvent: state.visibleGraph.present.latestEvent,\\n    earliestEvent: state.visibleGraph.present.earliestEvent\\n});\\n\\nexport default connect<any, any, any>(mapStateToProps)(GraphPage);\\n\",\"import * as React from 'react';\\nimport {\\n    Menu,\\n    MenuItem,\\n    Table,\\n    TableBody,\\n    TableCell,\\n    TableFooter,\\n    TableHeader,\\n    TableHeaderCell,\\n    TableProps,\\n    TableRow,\\n} from 'semantic-ui-react';\\n\\ninterface DataTableState {\\n    currentPage: number;\\n    rowsPerPage: number;\\n    numberOfPages: number;\\n    columns: string[];\\n}\\n\\ninterface DataTableProps extends TableProps {\\n    data: any[];\\n    rowsPerPage?: number;\\n    tableProps?: TableProps;\\n    header?: boolean;\\n    columnHeader?: string[];\\n}\\n\\nexport default class DataTable extends React.Component<DataTableProps, DataTableState> {\\n    constructor(props: DataTableProps) {\\n        super(props);\\n\\n        const rowsPerPage = props.rowsPerPage || 5;\\n        const numberOfPages = Math.ceil(props.data.length / rowsPerPage);\\n        const columns = props.columnHeader || Object.keys(props.data[0] || []);\\n\\n        this.state = {\\n            currentPage: 1,\\n            rowsPerPage,\\n            numberOfPages,\\n            columns\\n        };\\n    }\\n\\n    public handlePageClick = (e: React.MouseEvent<HTMLElement>) => {\\n        if (e.currentTarget.dataset.page) {\\n            this.setState({\\n                currentPage: Number(e.currentTarget.dataset.page)\\n            });\\n        }\\n    };\\n\\n    public handleDirectionClick = (e: React.MouseEvent<HTMLElement>) => {\\n        const direction = e.currentTarget.dataset.direction;\\n\\n        let change = 0;\\n        if (direction === \\\"LEFT\\\" && this.state.currentPage > 1) {\\n            change = -1;\\n        } else if (direction === \\\"RIGHT\\\" && this.state.currentPage < this.state.numberOfPages) {\\n            change = 1;\\n        }\\n\\n        if (change !== 0) {\\n            this.setState({\\n                currentPage: this.state.currentPage + change\\n            });\\n        }\\n    };\\n\\n    public render() {\\n        const { data } = this.props;\\n        const { currentPage, rowsPerPage, numberOfPages, columns } = this.state;\\n\\n        // slice current data set (more filters could be added, and also sorting)\\n        const currentData = data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);\\n\\n        let startPage = this.state.currentPage - 1;\\n\\n        if (numberOfPages <= 3 || this.state.currentPage === 1) {\\n            startPage = 1;\\n        } else if (this.state.currentPage === numberOfPages) {\\n            startPage = this.state.currentPage - 2;\\n        }\\n\\n        const pageRange: number[] = Array.from(\\n            new Array(Math.min(3, numberOfPages)),\\n            (x, i) => i + startPage\\n        );\\n        let entryIdx = 0;\\n        return (\\n            <div>\\n                <Table {...this.props.tableProps}>\\n                    {this.props.header && (\\n                        <TableHeader>\\n                            <TableRow>\\n                                {columns.map(key => (\\n                                    <TableHeaderCell key={key}>{key}</TableHeaderCell>\\n                                ))}\\n                            </TableRow>\\n                        </TableHeader>\\n                    )}\\n                    <TableBody>\\n                        {currentData.map(row => (\\n                            <TableRow key={entryIdx++}>\\n                                {columns.map(key => (\\n                                    <TableCell\\n                                        collapsing={true}\\n                                        key={entryIdx++}\\n                                        content={row[key]}\\n                                    />\\n                                ))}\\n                            </TableRow>\\n                        ))}\\n                    </TableBody>\\n                    <TableFooter>\\n                        <TableRow>\\n                            <TableHeaderCell {...{ colSpan: this.state.columns.length }}>\\n                                <Menu floated=\\\"right\\\" pagination={true}>\\n                                    <MenuItem\\n                                        icon=\\\"angle double left\\\"\\n                                        data-page={1}\\n                                        onClick={this.handlePageClick}\\n                                    />\\n                                    <MenuItem\\n                                        data-direction=\\\"LEFT\\\"\\n                                        onClick={this.handleDirectionClick}\\n                                        icon=\\\"angle left\\\"\\n                                    />\\n                                    {pageRange.map(pageIndex => (\\n                                        <MenuItem\\n                                            key={pageIndex}\\n                                            content={`${pageIndex}`}\\n                                            data-page={pageIndex}\\n                                            onClick={this.handlePageClick}\\n                                            active={pageIndex === this.state.currentPage}\\n                                            as=\\\"a\\\"\\n                                        />\\n                                    ))}\\n                                    <MenuItem\\n                                        data-direction=\\\"RIGHT\\\"\\n                                        onClick={this.handleDirectionClick}\\n                                        icon=\\\"angle right\\\"\\n                                    />\\n                                    <MenuItem\\n                                        icon=\\\"angle double right\\\"\\n                                        data-page={numberOfPages}\\n                                        onClick={this.handlePageClick}\\n                                    />\\n                                </Menu>\\n                            </TableHeaderCell>\\n                        </TableRow>\\n                    </TableFooter>\\n                </Table>\\n            </div>\\n        );\\n    }\\n}\\n\",\"import * as _ from 'lodash';\\nimport * as React from 'react';\\nimport { Link } from 'react-router-dom';\\nimport { Button, Container, Header, Popup } from 'semantic-ui-react';\\nimport { snakeToSpaced } from 'src/common';\\n\\nimport DataTable from './misc/DataTable';\\nimport LoadingBar from './misc/LoadingBar';\\n\\nexport interface EntriesTableProps {\\n    category: string;\\n    name: string;\\n}\\n\\ninterface CategoryEntry {\\n    comment: string;\\n    id: number;\\n    metadata: object;\\n}\\n\\nexport interface EntriesTableState {\\n    entries: CategoryEntry[];\\n    ready: boolean;\\n}\\n\\nexport default class EntriesTable extends React.Component<EntriesTableProps, EntriesTableState> {\\n    constructor(props: EntriesTableProps) {\\n        super(props);\\n\\n        this.state = {\\n            entries: [],\\n            ready: false\\n        };\\n    }\\n\\n    public componentWillMount = () => {\\n        fetch(\\n            `${\\n                process.env.NODE_ENV === \\\"production\\\" ? \\\"\\\" : \\\"http://localhost:8000\\\"\\n            }/api/categories/${this.props.category}`\\n        )\\n            .then(resp => resp.json())\\n            .then((json: CategoryEntry[]) => this.setState({ entries: json, ready: true }));\\n    };\\n\\n    public render() {\\n        if (this.state.ready === false) {\\n            return <LoadingBar text={\\\"Fetching Entries\\\"} />;\\n        }\\n\\n        if (this.state.entries.length === 0) {\\n            return (\\n                <Header\\n                    as=\\\"h1\\\"\\n                    textAlign=\\\"center\\\"\\n                    style={{\\n                        marginTop: \\\"50px\\\"\\n                    }}\\n                >\\n                    No Entries!\\n                </Header>\\n            );\\n        }\\n\\n        const entries = this.state.entries.map((entry, idx) => {\\n            let pairs = _.toPairs(entry.metadata).map(pair => {\\n                if (typeof pair[1] === \\\"string\\\" && pair[1].startsWith(\\\"http\\\")) {\\n                    pair[1] = <Button href={pair[1]} content=\\\"Follow Link\\\" />;\\n                }\\n                return [\\n                    snakeToSpaced(pair[0]),\\n                    <Popup key={idx} content={pair[1]} trigger={<span>{pair[1]}</span>} />\\n                ];\\n            });\\n\\n            pairs = [\\n                ...pairs,\\n                [\\\"Comment\\\", entry.comment],\\n                [\\n                    \\\"Graph\\\",\\n                    <Link key={idx} to={`${this.props.category}/${entry.id}`}>\\n                        <Button color=\\\"blue\\\" content=\\\"View Graph\\\" />\\n                    </Link>\\n                ]\\n            ];\\n            return _.fromPairs(pairs);\\n        });\\n\\n        const keys = [...Object.keys(this.state.entries[0].metadata), \\\"comment\\\", \\\"Graph\\\"];\\n\\n        return (\\n            <Container\\n                style={{\\n                    marginTop: \\\"50px\\\",\\n                    width: \\\"90%\\\",\\n                    maxWidth: \\\"90%\\\"\\n                }}\\n            >\\n                <Header as=\\\"h2\\\" textAlign=\\\"center\\\">\\n                    {this.props.name}\\n                </Header>\\n                <DataTable\\n                    data={entries}\\n                    tableProps={{\\n                        striped: true,\\n                        size: \\\"small\\\",\\n                        fixed: true\\n                    }}\\n                    header={true}\\n                    rowsPerPage={10}\\n                    columnHeader={keys.map(key => snakeToSpaced(key))}\\n                />\\n            </Container>\\n        );\\n    }\\n}\\n\",\"import * as React from 'react';\\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\\nimport { Icon, Menu, Sidebar as SUSidebar } from 'semantic-ui-react';\\nimport GraphPage from 'src/containers/GraphPage';\\nimport Upload from 'src/views/Upload';\\n\\nimport EntriesTable from './EntriesTable';\\n\\ninterface MenuEntry {\\n    icon?: JSX.Element;\\n    name: string;\\n    route: string;\\n    id: string;\\n    component?: any;\\n}\\n\\ninterface SideBarState {\\n    entries: MenuEntry[];\\n}\\n\\nclass Sidebar extends React.Component<any, SideBarState> {\\n    public constructor(props: any) {\\n        super(props);\\n\\n        this.state = {\\n            entries: [\\n                {\\n                    id: \\\"upload\\\",\\n                    route: \\\"/\\\",\\n                    name: \\\"Upload Data\\\",\\n                    icon: <Icon name=\\\"upload\\\" />,\\n                    component: () => <Upload postRoute=\\\"/new\\\" />\\n                }\\n            ]\\n        };\\n    }\\n\\n    public componentWillMount() {\\n        fetch(\\n            `${\\n                process.env.NODE_ENV === \\\"production\\\" ? \\\"\\\" : \\\"http://localhost:8000\\\"\\n            }/api/categories?uploaded=true`\\n        )\\n            .then(resp => resp.json())\\n            .then(json => {\\n                this.setState({\\n                    entries: [\\n                        ...this.state.entries,\\n                        ...json.map((category: { name: string; id: string }) => ({\\n                            id: category.id,\\n                            name: category.name,\\n                            route: `/${category.id}`\\n                        }))\\n                    ]\\n                });\\n            });\\n    }\\n\\n    public renderEntriesForCategory = (category: string, name: string) => {\\n        return (props: any) => {\\n            return <EntriesTable {...props} name={name} category={category} />;\\n        };\\n    };\\n\\n    public render() {\\n        return (\\n            <BrowserRouter>\\n                <div>\\n                    <div id=\\\"siderbar\\\">\\n                        <SUSidebar\\n                            style={{\\n                                position: \\\"fixed\\\" as \\\"fixed\\\",\\n                                width: \\\"150px\\\"\\n                            }}\\n                            as={Menu}\\n                            inverted={true}\\n                            animation={\\\"overlay\\\"}\\n                            visible={true}\\n                            vertical={true}\\n                            width=\\\"thin\\\"\\n                        >\\n                            {this.state.entries.map((entry, index) => {\\n                                return (\\n                                    <Link to={entry.route} key={index}>\\n                                        <Menu.Item>\\n                                            {\\\"icon\\\" in entry && entry.icon}\\n                                            {entry.name}\\n                                        </Menu.Item>\\n                                    </Link>\\n                                );\\n                            })}\\n                        </SUSidebar>\\n                    </div>\\n                    <div\\n                        id=\\\"content\\\"\\n                        style={{\\n                            marginLeft: \\\"150px\\\"\\n                        }}\\n                    >\\n                        <Switch>\\n                            {this.state.entries.map((entry, index) => {\\n                                if (entry.component !== undefined) {\\n                                    return (\\n                                        <Route\\n                                            key={index}\\n                                            exact={true}\\n                                            path={entry.route}\\n                                            component={entry.component}\\n                                        />\\n                                    );\\n                                } else {\\n                                    return (\\n                                        <Route\\n                                            key={index}\\n                                            exact={true}\\n                                            path={entry.route}\\n                                            render={this.renderEntriesForCategory(\\n                                                entry.id,\\n                                                entry.name\\n                                            )}\\n                                        />\\n                                    );\\n                                }\\n                            })}\\n                            <Route path=\\\"/:category/:id\\\" exact={true} component={GraphPage} />\\n                        </Switch>\\n                    </div>\\n                </div>\\n            </BrowserRouter>\\n        );\\n    }\\n}\\n\\nexport default Sidebar;\\n\",\"import { Action, ActionTypes } from '../actions/graph';\\nimport { Edge, Node } from '../models';\\n\\nexport interface State {\\n    edges: Edge[]; // ALL Edges in the graph\\n    nodes: Node[]; // ALL Nodes in the graph\\n}\\n\\nexport const initialState: State = {\\n    edges: [],\\n    nodes: []\\n};\\n\\nexport function reducer(state: State = initialState, action: Action) {\\n    switch (action.type) {\\n        // Set the initial edges\\n        case ActionTypes.SET_EDGES: {\\n            return {\\n                ...state,\\n                edges: action.payload.edges\\n            };\\n        }\\n\\n        // Set the initial nodes\\n        case ActionTypes.SET_NODES: {\\n            return {\\n                ...state,\\n                nodes: action.payload.nodes\\n            };\\n        }\\n\\n        case ActionTypes.SET_NODES_AND_EDGES: {\\n            return {\\n                ...state,\\n                nodes: action.payload.nodes,\\n                edges: action.payload.edges\\n            };\\n        }\\n\\n        default: {\\n            return state;\\n        }\\n    }\\n}\\n\",\"import { Action, ActionTypes } from '../actions/selectedEdge';\\nimport { Edge } from '../models';\\n\\nexport interface State {\\n    edge: undefined | Edge;\\n}\\n\\nexport const initialState: State = {\\n    edge: undefined\\n};\\n\\nexport function reducer(state: State = initialState, action: Action) {\\n    switch (action.type) {\\n        // Set the initial edges\\n        case ActionTypes.SET_SELECTED_EDGE: {\\n            return {\\n                edge:\\n                    action.payload.edge === undefined\\n                        ? undefined\\n                        : action.edges.filter(e => e.id === action.payload.edge)[0]\\n            };\\n        }\\n\\n        default: {\\n            return state;\\n        }\\n    }\\n}\\n\",\"import { Action, ActionTypes } from '../actions/selectedNode';\\nimport { Node } from '../models';\\n\\nexport interface State {\\n    node: undefined | Node;\\n}\\n\\nexport const initialState: State = {\\n    node: undefined\\n};\\n\\nexport function reducer(state: State = initialState, action: Action) {\\n    switch (action.type) {\\n        // Set the initial edges\\n        case ActionTypes.SET_SELECTED_NODE: {\\n            return {\\n                node:\\n                    action.payload.node === undefined\\n                        ? undefined\\n                        : action.nodes.filter(n => n.id === action.payload.node)[0]\\n            };\\n        }\\n\\n        default: {\\n            return state;\\n        }\\n    }\\n}\\n\",\"import { reducer as toastrReducer } from 'react-redux-toastr';\\nimport { combineReducers } from 'redux';\\nimport undoable, { StateWithHistory } from 'redux-undo';\\n\\nimport * as fromGraph from './graph';\\nimport * as fromSelectedEdge from './selectedEdge';\\nimport * as fromSelectedNode from './selectedNode';\\nimport * as fromVisibleGraph from './visibleGraph';\\n\\n/*\\n * This is the root state of the app\\n * It contains every substate of the app\\n */\\nexport interface State {\\n    graph: fromGraph.State;\\n    visibleGraph: StateWithHistory<fromVisibleGraph.State>;\\n    selectedNode: fromSelectedNode.State;\\n    selectedEdge: fromSelectedEdge.State;\\n}\\n\\n/*\\n * Root reducer of the app\\n * Returned reducer will be of type Reducer<State>\\n */\\nexport const reducer = combineReducers({\\n    visibleGraph: undoable(fromVisibleGraph.reducer, {\\n        ignoreInitialState: true\\n    }),\\n    toastr: toastrReducer,\\n    graph: fromGraph.reducer,\\n    selectedNode: fromSelectedNode.reducer,\\n    selectedEdge: fromSelectedEdge.reducer\\n});\\n\",\"import 'react-redux-toastr/lib/css/react-redux-toastr.min.css';\\n\\nimport * as React from 'react';\\nimport { Provider } from 'react-redux';\\nimport ReduxToastr from 'react-redux-toastr';\\nimport { applyMiddleware, createStore } from 'redux';\\nimport logger from 'redux-logger';\\n\\nimport Router from './components/Router';\\nimport { reducer } from './reducers';\\n\\n/*\\n * We're giving State interface to create store\\n * store is type of State defined in our reducers\\n */\\n\\nexport const store =\\n    process.env.NODE_ENV === \\\"production\\\"\\n        ? createStore(reducer)\\n        : createStore(reducer, applyMiddleware(logger));\\n\\nexport default class App extends React.Component {\\n    public render() {\\n        return (\\n            <Provider store={store}>\\n                <ReduxToastr\\n                    timeOut={2000}\\n                    newestOnTop={false}\\n                    preventDuplicates={true}\\n                    position=\\\"top-center\\\"\\n                    progressBar={false}\\n                    closeOnToastrClick={true}\\n                />\\n                <Router />\\n            </Provider>\\n        );\\n    }\\n}\\n\",\"// tslint:disable:no-console\\n// In production, we register a service worker to serve assets from local cache.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on the 'N+1' visit to a page, since previously\\n// cached resources are updated in the background.\\n\\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\\n// This link also includes instructions on opting out of this behavior.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport default function register() {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(\\n      process.env.PUBLIC_URL!,\\n      window.location.toString()\\n    );\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Lets check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\\n          );\\n        });\\n      } else {\\n        // Is not local host. Just register service worker\\n        registerValidSW(swUrl);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl: string) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker) {\\n          installingWorker.onstatechange = () => {\\n            if (installingWorker.state === 'installed') {\\n              if (navigator.serviceWorker.controller) {\\n                // At this point, the old content will have been purged and\\n                // the fresh content will have been added to the cache.\\n                // It's the perfect time to display a 'New content is\\n                // available; please refresh.' message in your web app.\\n                console.log('New content is available; please refresh.');\\n              } else {\\n                // At this point, everything has been precached.\\n                // It's the perfect time to display a\\n                // 'Content is cached for offline use.' message.\\n                console.log('Content is cached for offline use.');\\n              }\\n            }\\n          };\\n        }\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl: string) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type')!.indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import './index.css';\\nimport 'semantic-ui-css/semantic.min.css';\\n\\nimport * as React from 'react';\\nimport * as ReactDOM from 'react-dom';\\n\\nimport App from './App';\\nimport registerServiceWorker from './registerServiceWorker';\\n\\nReactDOM.render(<App />, document.getElementById(\\\"root\\\") as HTMLElement);\\nregisterServiceWorker();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{356:function(e,t,n){\"use strict\";(function(e){var r=n(15),a=n(13),i=n(0),o=n(315),s=n(316),l=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return r.c(n,t),n.prototype.render=function(){if(void 0===this.props.edge)return i.createElement(o.a,{as:\"h3\",className:\"centered\"},\"Click an Edge to view information\");if(this.props.edge.properties.data.every(function(e){return a.isNull(e)}))return i.createElement(o.a,{as:\"h5\",className:\"centered\"},\"Edge contains no underlying events.\");var t=a.cloneDeep(this.props.edge),n=new Set,r=t.properties.data.map(function(e){if(a.isNull(e))return{};if(Object.keys(e).forEach(function(e){return n.add(a.capitalize(e))}),\"timestamp\"in e){var t=new Date(0);t.setUTCSeconds(Number(e.timestamp)),e.timestamp=a.toString(t)}return a.fromPairs(a.toPairs(e).map(function(e){var t=e[0],n=e[1];return[a.capitalize(t),n]}))}),l=Array.from(n);return i.createElement(s.a,{celled:!0,striped:!0,headerRow:l,fixed:!0,tableData:r,renderBodyRow:function(t,n){return e.console.log(t,n),{key:\"row-\"+n,cells:Object.values(t).map(function(e){if(a.isNull(e))return\"\";if(a.isNumber(e))return e;var t=JSON.stringify(e);return t.slice(1,t.length-1)}).slice(),style:{wordBreak:\"break-all\"}}}})},n}(i.Component);t.a=l}).call(this,n(36))},387:function(e,t,n){e.exports=n(600)},388:function(e,t,n){},600:function(e,t,n){\"use strict\";n.r(t);n(388),n(390);var r,a,i,o=n(0),s=n(114),l=n(15),c=(n(397),n(99)),d=n(100),u=n.n(d),p=n(115),m=(n(413),n(603)),h=n(602),f=n(604),E=n(605),v=n(48),g=n(326),y=n(269),b=n(13),S=n(75),k=n.n(S),T=n(321),N=n(315),C=n(261),_=n(327),D=n(320);function w(e,t){return{type:r.SET_NODES_AND_EDGES,payload:{nodes:e,edges:t}}}function O(e){return{type:a.SET_SELECTED_EDGE,edges:tt.getState().graph.edges,payload:{edge:e}}}function P(e){return{type:i.SET_SELECTED_NODE,nodes:tt.getState().graph.nodes,payload:{node:e}}}!function(e){e.SET_NODES=\"[graph] SET_NODES\",e.SET_EDGES=\"[graph] SET_EDGES\",e.SET_NODES_AND_EDGES=\"[graph] SET_NODES_AND_EDGES\"}(r||(r={})),(a||(a={})).SET_SELECTED_EDGE=\"[selected_edge] SET_SELECTED_EDGE\",(i||(i={})).SET_SELECTED_NODE=\"[selected_node] SET_SELECTED_NODE\";var I,R=n(166),x=n(223),G=n(299),B=function(e){return o.createElement(\"div\",null,o.createElement(R.a,{padded:\"very\",basic:!0,className:\"container\",style:{display:\"flex\",justifyContent:\"center\",alignItems:\"center\",height:\"100vh\"}},o.createElement(x.a,{active:!0,inverted:!0},o.createElement(G.a,{size:\"huge\"},e.text))))},L=n(150),A=n(300),j=n(301);function U(e){return{type:I.SET_VISIBLE_NODES,payload:{nodes:e}}}function H(e){return{type:I.PULL_IN_NEIGHBORS,payload:{node:e},nodes:tt.getState().graph.nodes,edges:tt.getState().graph.edges}}function F(e){return{type:I.SET_VISIBLE_NODE_TYPES,payload:{nodeTypes:e}}}function M(e){return{type:I.SET_VISIBLE_EDGE_TYPES,payload:{edgeTypes:e}}}function V(e,t){return{type:I.RUN_MUTATOR_FROM_NODE,selectedNode:e,mutator:t,nodes:tt.getState().graph.nodes,edges:tt.getState().graph.edges,visibleNodes:tt.getState().visibleGraph.present.visibleNodes,visibleEdges:tt.getState().visibleGraph.present.visibleEdges,visibleNodeTypes:tt.getState().visibleGraph.present.visibleNodeTypes,visibleEdgeTypes:tt.getState().visibleGraph.present.visibleEdgeTypes}}function q(e){return b.split(e,\"_\").map(function(e){if(e.length>1){var t=Array.from(e),n=t[0],r=t.slice(1);return[n.toUpperCase()].concat(r).join(\"\")}return e.toUpperCase()}).join(\" \")}!function(e){e.SET_VISIBLE_NODES=\"[visible_graph] SET_VISIBLE_NODES\",e.SET_VISIBLE_EDGES=\"[visible_graph] SET_VISIBLE_EDGES\",e.PULL_IN_NEIGHBORS=\"[visible_graph] PULL_IN_NEIGHBORS\",e.HIDE_NODE=\"[visible_graph] HIDE_NODE\",e.ADD_NODE=\"[visible_graph] ADD_NODE\",e.SET_VISIBLE_NODE_TYPES=\"[visible_graph] SET_VISIBLE_NODE_TYPES\",e.SET_VISIBLE_EDGE_TYPES=\"[visible_graph] SET_VISIBLE_EDGE_TYPES\",e.RUN_MUTATOR_FROM_NODE=\"[mutator] RUN_MUTATOR_FROM_NODE\"}(I||(I={}));var W=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.state={nodeTypes:[],groupedNodes:{},nodeColors:{},isLoading:!1,results:{},value:\"\"},t.resetComponent=function(){return t.setState({isLoading:!1,results:{},value:\"\"})},t.handleResultSelect=function(e,n){var r;t.setState({value:n.result._display}),tt.dispatch((r=n.result.id,{type:I.ADD_NODE,payload:{node:r},nodes:tt.getState().graph.nodes,edges:tt.getState().graph.edges})),tt.dispatch(P(n.result.id))},t.handleSearchChange=function(e,n){t.setState({isLoading:!0,value:void 0===n.value?\"\":n.value}),setTimeout(function(){if(t.state.value.length<1)return t.resetComponent();var e=new RegExp(b.escapeRegExp(t.state.value),\"i\"),n=function(t){return e.test(JSON.stringify(t.properties))},r=b.reduce(t.state.groupedNodes,function(e,t,r){var a=b.filter(t,n);return a.length&&(e[r]={name:r,results:a}),e},{});t.setState({isLoading:!1,results:r})},300)},t.resultsRender=function(e){return o.createElement(\"div\",{key:e.properties._key,style:{wordBreak:\"break-all\"}},o.createElement(L.a,{content:e._display,color:\"blue\",style:{display:\"flex\",justifyContent:\"center\"},size:\"large\"}),b.toPairs(e.properties).map(function(e){var n=e[0],r=e[1];return o.createElement(A.a.Item,{key:n},o.createElement(A.a.Content,null,o.createElement(\"b\",null,q(n)),\":\",\" \",z(r,t.state.value)))}))},t.categoryRender=function(e){var n=e.name;return o.createElement(L.a,{tag:!0,style:{backgroundColor:t.state.nodeColors[n||\"\"]}},n)},t}return l.c(t,e),t.getDerivedStateFromProps=function(e,t){var n=b.groupBy(e.nodes,\"_node_type\"),r=Object.keys(n),a={};return b.toPairs(n).map(function(e){var t=e[0],n=e[1];return a[t]=n[0].color}),l.a({},t,{groupedNodes:n,nodeTypes:r,nodeColors:a})},t.prototype.render=function(){return o.createElement(j.a,{input:{fluid:!0,placeholder:\"Search for a node across all properties (min 3 characters).\"},category:!0,loading:this.state.isLoading,onResultSelect:this.handleResultSelect,onSearchChange:b.debounce(this.handleSearchChange,500,{leading:!0}),results:this.state.results,value:this.state.value,resultRenderer:this.resultsRender,categoryRenderer:this.categoryRender,fluid:!0,minCharacters:3})},t}(o.Component),z=function(e,t){if(void 0===e&&(e=\"\"),void 0===t&&(t=\"\"),null===e)return e;if(!t.trim())return e.toString();var n=new RegExp(\"(\"+b.escapeRegExp(t)+\")\",\"gi\");return e.toString().split(n).filter(function(e){return e}).map(function(e,t){return n.test(e)?o.createElement(\"mark\",{key:t},e):e})},J=n(356),Y=n(328),X=(function(e){function t(t){var n=e.call(this,t)||this;return n.setHintValue=function(e){n.setState({value:\"foo\"})},n.resetHintValue=function(){n.setState({value:null})},n.state={valuke:null},n}l.c(t,e),t.prototype.render=function(){if(void 0===this.props.edge)return\"\";var e=b.countBy(this.props.edge.properties.data,\"timestamp\"),t=b.toPairs(e).map(function(e){var t=new Date(0);return t.setUTCSeconds(Number(e[0])),{x:t,y:e[1]}}),n=Object(Y.g)(Y.e);return o.createElement(n,{xType:\"time\",xDomain:[this.props.earliestEvent,this.props.latestEvent],height:300,margin:{bottom:70}},o.createElement(Y.a,null),o.createElement(Y.c,null),o.createElement(Y.d,{title:\"Time\",tickLabelAngle:-45}),o.createElement(Y.f,null),o.createElement(Y.b,{data:b.sortBy(t.slice(),\"x\")}))}}(o.Component),n(316)),Z=function(e){function t(t){return e.call(this,t)||this}return l.c(t,e),t.prototype.render=function(){var e=this.props.node;return void 0===e?o.createElement(N.a,{as:\"h3\",className:\"centered\"},\"Click a node to view information\"):o.createElement(X.a,{celled:!0,striped:!0,columns:2},o.createElement(X.a.Header,null,o.createElement(X.a.Row,null,o.createElement(X.a.HeaderCell,{colSpan:\"2\",textAlign:\"center\",style:{backgroundColor:e.color}},o.createElement(N.a,null,e._display))),o.createElement(X.a.Row,null,o.createElement(X.a.HeaderCell,null,\"Key\"),o.createElement(X.a.HeaderCell,null,\"Value\")),Object.keys(e.properties).map(function(t,n){return o.createElement(X.a.Row,{key:n},o.createElement(X.a.Cell,null,q(t)),o.createElement(X.a.Cell,{style:{wordBreak:\"break-all\"}},null===e.properties[t]||\"object\"===typeof e.properties[t]?JSON.stringify(e.properties[t]):e.properties[t]))})))},t}(o.Component),$=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l.c(t,e),t.prototype.render=function(){var e=JSON.stringify(this.props.earliestEvent),t=JSON.stringify(this.props.latestEvent);return\"Invalid Date\"===this.props.earliestEvent.toString()&&\"Invalid Date\"===this.props.latestEvent.toString()&&(e=\" No Timestamps \",t=\" No Timestamps \"),o.createElement(C.a,{columns:\"equal\"},o.createElement(C.a.Row,{centered:!0},o.createElement(C.a.Column,null,\"Visible Nodes: \"+this.props.visibleNodes,o.createElement(\"br\",null),\"Visible Edges: \"+this.props.visibleEdges),o.createElement(C.a.Column,null,\"Total Nodes: \"+this.props.nodes,o.createElement(\"br\",null),\"Total Edges: \"+this.props.edges)),o.createElement(C.a.Row,null,o.createElement(C.a.Column,{width:16},\"Earliest Event: \"+e.slice(1,e.length-1),o.createElement(\"br\",null),\"Latest Event: \"+t.slice(1,t.length-1))))},t}(o.Component),K=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.fieldsToTable=function(e){return o.createElement(X.a,{className:\"centered\",compact:!0},b.toPairs(e).map(function(e){return o.createElement(X.a.Row,null,o.createElement(X.a.Cell,null,q(e[0])),o.createElement(X.a.Cell,null,\"string\"===typeof e[1]?q(e[1]):JSON.stringify(e[1])))}))},t.handleNodeClick=function(e){return function(t){tt.dispatch(P(e))}},t.handleEgeClick=function(e){return function(t){tt.dispatch(O(e))}},t.makeNodesTable=function(){return o.createElement(X.a,{selectable:!0,celled:!0,sortable:!0},o.createElement(X.a.Header,null,o.createElement(X.a.HeaderCell,null,\"Node Type\"),o.createElement(X.a.HeaderCell,null,\"Display\")),o.createElement(X.a.Body,null,t.props.visibleNodes.map(function(e){return o.createElement(X.a.Row,{onClick:t.handleNodeClick(e.id),key:e.id},o.createElement(X.a.Cell,null,e._node_type),o.createElement(X.a.Cell,null,e._display))})))},t.makeEdgesTable=function(e){return o.createElement(X.a,{selectable:!0,celled:!0,sortable:!0},o.createElement(X.a.Header,null,o.createElement(X.a.HeaderCell,null,\"From\"),o.createElement(X.a.HeaderCell,null,\"To\"),o.createElement(X.a.HeaderCell,null,\"Type\")),o.createElement(X.a.Body,null,t.props.visibleEdges.map(function(n){return o.createElement(X.a.Row,{onClick:t.handleEgeClick(n.id),key:n.id},o.createElement(X.a.Cell,null,e[n.to]._display),o.createElement(X.a.Cell,null,e[n.from]._display),o.createElement(X.a.Cell,null,n.label))})))},t}return l.c(t,e),t.prototype.render=function(){var e=this.props.visibleNodes.reduce(function(e,t){return e[t.id]=t,e},{});return o.createElement(R.a,{style:{height:\"92vh\",overflowY:\"auto\"}},o.createElement(D.a,{defaultActiveIndex:[0,1,2,3,4,5,6],exclusive:!1,panels:[{key:\"nodes_table\",title:{children:o.createElement(T.a,{horizontal:!0},o.createElement(N.a,{as:\"h3\"},o.createElement(v.a,{name:\"linode\"}),\" Nodes\"))},content:{children:this.makeNodesTable()}},{key:\"nodes_table\",title:{children:o.createElement(T.a,{horizontal:!0},o.createElement(N.a,{as:\"h3\"},o.createElement(v.a,{name:\"arrows alternate horizontal\"}),\" Edges\"))},content:{children:this.makeEdgesTable(e)}}]}))},t}(o.PureComponent),Q=n(358),ee=n.n(Q),te=function(e){function t(t){var n=e.call(this,t)||this;return n.state={items:[],groups:[]},n}return l.c(t,e),t.getDerivedStateFromProps=function(e){var t=0;var n=b.compact(b.flattenDeep(e.visibleEdges.map(function(n){var r=b.find(e.visibleNodes,{id:n.to});if(!b.isNil(n)&&!b.isUndefined(r)&&\"properties\"in n&&0!==n.properties.data.length)return n.properties.data.filter(function(e){return!b.isNil(e)&&\"timestamp\"in e}).map(function(e){var a=new Date(0);return a.setUTCSeconds(e.timestamp),{id:t++,content:r._display+\" <span>(\"+n.label+\")</span>\",start:a,group:n.label,style:\"background-color: \"+r.color}})})));return{items:n,groups:b.map(b.uniq(b.map(n,\"group\")),function(e){return{id:e,content:e}})}},t.prototype.render=function(){var e=this;return o.createElement(\"div\",{style:{paddingTop:\"5px\"}},o.createElement(ee.a,{ref:function(t){return null===t?null==e.el:e.el=t.$el},items:this.state.items,groups:this.state.groups,options:{width:\"100%\",maxHeight:\"90vh\",height:\"90vh\",verticalScroll:!0,type:\"box\",showCurrentTime:!1}}))},t}(o.Component),ne=n(359),re=n(263),ae=n.n(re),ie={nodes:{shape:\"circle\",shapeProperties:{borderDashes:[2,0]},borderWidth:2,color:{border:\"#fff\"},font:{size:8},scaling:{label:{enabled:!0}}},layout:{improvedLayout:!1,hierarchical:!1},edges:{color:{color:\"#A9A9A9\",inherit:!1},font:{align:\"horizontal\"},smooth:!0},physics:{solver:\"forceAtlas2Based\",forceAtlas2Based:{gravitationalConstant:-50,centralGravity:.01,springConstant:.08,springLength:100,damping:.5,avoidOverlap:.5},adaptiveTimestep:!0,stabilization:{iterations:200,fit:!0}},height:.965*window.innerHeight+\"px\"},oe=JSON.parse(JSON.stringify(ie));oe.physics=!1,oe.layout.hierarchical={enabled:!0,sortMethod:\"directed\"};var se=n(329),le={visibleNodes:[],visibleEdges:[],visibleNodeTypes:[],visibleEdgeTypes:[],earliestEvent:new Date(0),latestEvent:new Date},ce=25;function de(e,t){var n=b.map(e,\"id\");return t.filter(function(e){return b.includes(n,e.from)&&b.includes(n,e.to)})}function ue(e){for(var t=e[0],n=e[0],r=1,a=e.length;r<a;r++){var i=e[r];t=i<t?i:t,n=i>n?i:n}return[t,n]}function pe(e){var t=new Date(0);return t.setUTCSeconds(Number(e)),t}var me,he=function(){return function(){this.name=\"Backward Fanout\",this.category=\"Traversal\",this.mutate=function(e,t,n,r,a,i,o){if(void 0===o)return{visibleNodes:e,visibleEdges:t};for(var s=[o],l=[],c=function(){var e=s.pop(),t=i.filter(function(t){return t.to===e}).filter(function(e){return b.includes(r,e.label)}).map(function(e){return e.from}).filter(function(e){return!b.includes(l,e)});t.forEach(function(e){return l.push(e)}),t.filter(function(e){return!b.includes(s,e)}).forEach(function(e){return s.push(e)})};0!==s.length;)c();var d=l.map(function(e){return b.find(a,{id:e})});return{visibleNodes:e=b.uniqBy(e.concat(b.compact(d)),\"id\"),visibleEdges:t=b.uniqBy(t.concat(de(e,i)),\"id\")}}}}(),fe=function(){return function(){this.name=\"Forward Fanout\",this.category=\"Traversal\",this.mutate=function(e,t,n,r,a,i,o){if(void 0===o)return{visibleNodes:e,visibleEdges:t};for(var s=[o],l=[],c=function(){var e=s.pop(),t=i.filter(function(t){return t.from===e}).filter(function(e){return b.includes(r,e.label)}).map(function(e){return e.to}).filter(function(e){return!b.includes(l,e)});t.forEach(function(e){return l.push(e)}),t.filter(function(e){return!b.includes(s,e)}).forEach(function(e){return s.push(e)})};0!==s.length;)c();var d=l.map(function(e){return b.find(a,{id:e})});return{visibleNodes:e=b.uniqBy(e.concat(b.compact(d)),\"id\"),visibleEdges:t=b.uniqBy(t.concat(de(e,i)),\"id\")}}}}(),Ee=function(e){me=e},ve=function(e){return me.getNodeAt(e)},ge=function(){me.stopSimulation()},ye=function(e){function t(t){var n=e.call(this,t)||this;return n.runBackWardsTravel=function(){var e=Number(ve(n.props.position));tt.dispatch(V(e,new he))},n.runForwardsTravel=function(){var e=Number(ve(n.props.position));tt.dispatch(V(e,new fe))},n}return l.c(t,e),t.prototype.render=function(){return o.createElement(se.b,{id:\"graph_context_menu\"},this.props.children,o.createElement(se.a,{id:\"graph_context_menu\"},o.createElement(se.c,{onClick:this.runBackWardsTravel},\"Backtrack Node\"),o.createElement(se.c,{onClick:this.runForwardsTravel},\"Show all descendents\")))},t}(o.Component),be=function(e){function t(t){var n=e.call(this,t)||this;return n.onClick=function(e){var t=e.nodes,n=e.edges;Object(ne.hideMenu)(),0!==t.length?tt.dispatch(P(t[0])):0!==n.length&&tt.dispatch(O(n[0]))},n.onDoubleClick=function(e){var t=e.nodes;0!==t.length&&tt.dispatch(H(t[0]))},n.onHold=function(e){var t,n=e.nodes;0!==n.length&&tt.dispatch((t=n[0],{type:I.HIDE_NODE,payload:{node:t}}))},n.onRightClick=function(e){return n.setState(e.pointer.DOM),ge(),!0},n}return l.c(t,e),t.prototype.render=function(){return o.createElement(ye,{position:this.state},o.createElement(ae.a,{key:\"graph\",graph:{edges:this.props.visibleEdges,nodes:this.props.visibleNodes},getNetwork:Ee,options:ie,events:{click:this.onClick,doubleClick:this.onDoubleClick,hold:this.onHold,oncontext:this.onRightClick}}))},t}(o.Component),Se=n(250),ke=n(335),Te={Markdown:{h3:\"###\"},JIRA:{h3:\"h3. \"}},Ne=function(e){function t(t){var n=e.call(this,t)||this;return n.copy=function(){var e=document.getElementById(\"segment\");if(null!==e){var t=document.createElement(\"textarea\");t.innerHTML=e.innerText,document.body.appendChild(t),t.select(),document.execCommand(\"copy\"),t.remove()}},n.nodesMDTable=function(){var e=b.groupBy(n.props.visibleNodes,\"_node_type\");return b.toPairs(e).map(function(e){return o.createElement(\"div\",{key:e[0]},o.createElement(\"div\",null,n.state.h3,\" \",e[0]),o.createElement(\"div\",null,\"|\",Object.keys(e[1][0].properties).join(\"|\"),\"|\"),o.createElement(\"div\",null,\"|\",Object.keys(e[1][0].properties).map(function(e){return\"--\"}).join(\"|\"),\"|\"),o.createElement(\"div\",null,e[1].map(function(e){return o.createElement(\"div\",{key:e.id},\"|\",Object.keys(e.properties).map(function(t){return\"string\"===typeof e.properties[t]?e.properties[t].replace(\"|\",\"\\\\|\"):JSON.stringify(e.properties[t]).replace(\"|\",\"\\\\|\")}).join(\"|\"),\"|\")})),o.createElement(\"br\",null))})},n.edgesMDTable=function(){var e=n.props.visibleNodes.reduce(function(e,t){return e[t.id]=t,e},{}),t=b.flatten(n.props.visibleEdges.map(function(e){return e.properties.data.length>0?e.properties.data.map(function(t){var n=new Date(0),r=b.get(t,\"timestamp\",-1);return-1!==r&&\"null\"!==r?(n.setUTCSeconds(r),r=JSON.stringify(n)):r=JSON.stringify(\"Unknown\"),{from:e.from,to:e.to,type:e.label,data:JSON.stringify(b.omit(t,\"timestamp\")).replace(\"|\",\"\\\\|\"),timestamp:r.slice(1,r.length-1)}}):[{from:e.from,to:e.to,type:e.label,data:JSON.stringify({}),timestamp:\"-1\"}]}));return t=b.sortBy(t.map(function(t){return l.a({},t,{to:e[t.to]._display,from:e[t.from]._display})}),\"timestamp\"),o.createElement(\"div\",null,o.createElement(\"div\",null,n.state.h3,\" Edges\"),o.createElement(\"div\",null,\"|\",Object.keys(t[0]).join(\"|\"),\"|\"),o.createElement(\"div\",null,\"|\",Object.keys(t[0]).map(function(e){return\"--\"}).join(\"|\"),\"|\"),t.map(function(e,t){return o.createElement(\"div\",{key:t},\"|\",Object.values(e).join(\"|\"),\"|\")}))},n.handleSyntaxChange=function(e,t){var r=Te[t.value];n.setState(r)},n.state=l.a({},Object.values(Te)[0]),n}return l.c(t,e),t.prototype.render=function(){return o.createElement(R.a,{key:\"segment\",style:{height:\"92vh\",overflowY:\"auto\"}},o.createElement(Se.a,{primary:!0,key:\"btn\",icon:\"copy\",onClick:this.copy,content:\"Copy Table\"}),o.createElement(ke.a,{style:{float:\"right\"},onChange:this.handleSyntaxChange,options:Object.keys(Te).map(function(e){return{key:e,text:e,value:e}}),placeholder:\"Choose markdown syntax\"}),o.createElement(T.a,null),o.createElement(\"div\",{id:\"segment\"},o.createElement(\"div\",null,this.props.visibleNodes.length>0&&this.nodesMDTable()),o.createElement(\"div\",null,this.props.visibleEdges.length>0&&this.edgesMDTable())))},t}(o.PureComponent),Ce=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l.c(t,e),t.prototype.render=function(){return o.createElement(ae.a,{graph:{edges:this.props.visibleEdges,nodes:this.props.visibleNodes},options:oe})},t}(o.Component),_e=n(72),De=n(381),we=n(606),Oe=n(276),Pe=n(324),Ie=n(325),Re=n(284),xe=n(323),Ge=function(e){function t(t){var n=e.call(this,t)||this;return n.setActiveTranformer=function(e,t){n.setState({selectedTransformer:t.value})},n.setActiveBackend=function(e,t){n.setState({selectedBackend:t.value})},n.handleToggleAdvanced=function(){n.setState({advancedVisible:!n.state.advancedVisible})},n.updateTransformers=function(e,t){n.setState({selectedDatasource:t.value,selectedTransformer:t.value.transformers[0],params:t.value.params,isExternal:\"external\"===t.value.type,formParams:{}})},n.handleCommentChange=function(e,t){n.setState({comment:t.value})},n.onDrop=function(e){return function(t){var r=n.state.formParams;r[e]=t[0],n.setState({formParams:r})}},n.onParamChange=function(e){return function(t,r){var a=n.state.formParams;a[e]=r.value,n.setState({formParams:a})}},n.onSubmit=function(){var e=n.state.params.filter(function(e){return!0===e.required&&!Object.keys(n.state.formParams).includes(e.name)});if(e.length>0){var t=e.map(function(e){return q(e.name.replace(\"_file\",\"\"))});n.setState({errorMessage:\"The following parameters are required: \"+t.join(\", \"),graphRoute:\"\",processing:!1,steps:{upload:{active:!0,done:!1},transform:{active:!1,done:!1},view:{active:!1,done:!1}}})}else{var r=new FormData;r.append(\"datasource\",n.state.selectedDatasource.id),r.append(\"backend\",n.state.selectedBackend.id),r.append(\"transformer\",n.state.selectedTransformer.id),r.append(\"comment\",n.state.comment),n.state.params.forEach(function(e){void 0!==n.state.formParams[e.name]&&r.append(e.name,n.state.formParams[e.name])}),n.setState({processing:!0,errorMessage:\"\",graphRoute:\"\",steps:{upload:{active:!0,done:!0},transform:{active:!0,done:!1},view:{active:!1,done:!1}}}),fetch(\"/api\"+n.props.postRoute,{method:\"POST\",body:r}).then(function(e){return e.json()}).then(function(e){e.hasOwnProperty(\"message\")?n.setState({errorMessage:\"Error on parse: \"+e.message,graphRoute:\"\",processing:!1,steps:{upload:{active:!0,done:!1},transform:{active:!1,done:!1},view:{active:!1,done:!1}}}):e.hasOwnProperty(\"resp\")?n.setState({graphRoute:e.resp,redirect:!1,processing:!1,steps:{upload:{active:!0,done:!0},transform:{active:!0,done:!0},view:{active:!0,done:!0,link:e.resp}}}):(void 0!==n.props.postUploadHandler&&n.props.postUploadHandler(),n.setState({processing:!1,graphRoute:e.self,redirect:!0,steps:{upload:{active:!0,done:!0},transform:{active:!0,done:!0},view:{active:!0,done:!1,link:e.self}}}))})}},n.makeDropZones=function(){return n.state.params.map(function(e){return o.createElement(_e.Form.Field,{key:e.name,required:e.required,name:e.name},o.createElement(De.a,{multiple:!1,onDrop:n.onDrop(e.name)},function(t){var r=t.getRootProps,a=t.getInputProps;return o.createElement(\"div\",l.a({},r()),o.createElement(\"input\",l.a({},a())),o.createElement(R.a,{placeholder:!0},o.createElement(N.a,{icon:!0},o.createElement(v.a,{name:\"file archive\"}),e.name in n.state.formParams?n.state.formParams[e.name].name:q(e.name.replace(\"_file\",\"\"))),o.createElement(Se.a,{primary:!0},\"Upload Data\")))}))})},n.makeInputs=function(){return n.state.params.map(function(e){return o.createElement(_e.Form.Input,{name:e.name,key:e.name,placeholder:e.default,label:q(e.name),onChange:n.onParamChange(e.name),required:e.required})})},n.makeSteps=function(){return o.createElement(Oe.a.Group,{attached:\"top\",widths:3},o.createElement(Oe.a,{completed:n.state.steps.upload.done,active:n.state.steps.upload.active},o.createElement(v.a,{name:\"upload\"}),o.createElement(Oe.a.Content,null,o.createElement(Oe.a.Title,null,\"Upload Data\"),o.createElement(Oe.a.Description,null,\"Select from available data sources.\"))),o.createElement(Oe.a,{completed:n.state.steps.transform.done,active:n.state.steps.transform.active},o.createElement(v.a,{name:\"cogs\"}),o.createElement(Oe.a.Content,null,o.createElement(Oe.a.Title,null,\"Transform\"),o.createElement(Oe.a.Description,null,\"Transform Data\"))),o.createElement(Oe.a,{completed:n.state.steps.view.done,active:n.state.steps.view.active,link:void 0!==n.state.steps.view.link,href:n.state.steps.view.link},o.createElement(v.a,{name:\"linode\"}),o.createElement(Oe.a.Content,null,o.createElement(Oe.a.Title,null,\"View Graph\"))))},n.pipelines=[],n.backends=[],n.state={ready:!1,comment:\"\",isExternal:!1,selectedDatasource:{},selectedTransformer:{},selectedBackend:{id:\"NetworkX\",name:\"NetworkX\"},params:[],formParams:{},graphRoute:\"\",redirect:!1,errorMessage:\"\",steps:{upload:{active:!0,done:!1},transform:{active:!1,done:!1},view:{active:!1,done:!1}},processing:!1,advancedVisible:!1},n}return l.c(t,e),t.prototype.componentWillMount=function(){var e=this;fetch(\"/api/datasources\").then(function(e){return e.json()}).then(function(t){if(void 0!==t){e.pipelines=t.datasources,e.backends=t.backends;var n=e.pipelines[0],r=\"external\"===n.type;e.setState({selectedDatasource:n,selectedTransformer:n.transformers[0],params:n.params,ready:!0,isExternal:r})}})},t.prototype.render=function(){return!1===this.state.ready?o.createElement(B,{text:\"Loading Configurations\"}):o.createElement(Pe.a,{style:{marginTop:\"50px\",width:\"65%\"}},this.makeSteps(),o.createElement(_e.Form,{className:\"attached fluid segment\"},o.createElement(_e.Form.Group,{widths:\"equal\"},o.createElement(_e.Form.Select,{search:!0,name:\"datasource\",label:o.createElement(\"div\",null,o.createElement(Ie.a,{trigger:o.createElement(v.a,{name:\"info circle\"}),content:\"Select the type of data you would like graphed.\"}),o.createElement(\"span\",{style:{color:\"rgba(0,0,0,.87)\",fontSize:\".92857143em\",fontWeight:700}},\"Data Source\")),placeholder:\"Select Data Source\",value:this.state.selectedDatasource,options:this.pipelines.map(function(e){return{key:e.id,text:e.name,value:e}}),onChange:this.updateTransformers}),this.state.advancedVisible&&this.state.selectedDatasource.transformers&&o.createElement(_e.Form.Select,{name:\"transformer\",label:o.createElement(\"div\",null,o.createElement(Ie.a,{trigger:o.createElement(v.a,{name:\"info circle\"}),content:\"Different transformers may produce different graphs\"}),o.createElement(\"span\",{style:{color:\"rgba(0,0,0,.87)\",fontSize:\".92857143em\",fontWeight:700}},\"Transformer\")),placeholder:\"Select Transformer\",value:this.state.selectedTransformer,options:this.state.selectedDatasource.transformers.map(function(e){return{key:e.id,text:e.name,value:e}}),onChange:this.setActiveTranformer}),this.state.advancedVisible&&o.createElement(_e.Form.Select,{name:\"backend\",label:o.createElement(\"div\",null,o.createElement(Ie.a,{trigger:o.createElement(v.a,{name:\"info circle\"}),content:\"Destination of the graph. NetworkX will use the web GUI.\"}),o.createElement(\"span\",{style:{color:\"rgba(0,0,0,.87)\",fontSize:\".92857143em\",fontWeight:700}},\"Backend\")),placeholder:\"Select Transformer\",value:this.state.selectedBackend,options:this.backends.map(function(e){return{key:e.id,text:e.name,value:e}}),onChange:this.setActiveBackend})),o.createElement(_e.Form.TextArea,{name:\"comment\",label:\"Comment\",placeholder:\"\",value:this.state.comment,onChange:this.handleCommentChange}),o.createElement(N.a,{textAlign:\"center\",as:\"h5\"},this.state.isExternal?\"Input required parameters\":\"Upload Required Files\"),o.createElement(_e.Form.Group,{className:\"fluid\",widths:\"equal\"},this.state.isExternal?this.makeInputs():this.makeDropZones()),o.createElement(_e.Form.Field,null,o.createElement(Re.a,{onChange:this.handleToggleAdvanced,checked:this.state.advancedVisible,label:\"Show Advanced Options\"})),o.createElement(Se.a,{style:{marginTop:\"1em\"},color:\"blue\",onClick:this.onSubmit},\"Submit\")),\"\"!==this.state.errorMessage&&o.createElement(xe.a,{negative:!0,icon:\"warning sign\",attached:\"bottom\",header:\"Error\",content:this.state.errorMessage}),\"\"!==this.state.graphRoute&&[o.createElement(xe.a,{key:\"msg\",positive:!0,icon:\"lnode\",attached:\"bottom\",header:\"Graph succesfully created!\",content:this.state.graphRoute}),this.state.redirect&&o.createElement(we.a,{key:\"redirect\",to:this.state.graphRoute})],this.state.processing&&o.createElement(xe.a,{info:!0,icon:!0,attached:\"bottom\"},o.createElement(v.a,{name:\"circle notched\",loading:!0}),o.createElement(xe.a.Content,null,o.createElement(xe.a.Header,null,\"Graphing data\"))))},t}(o.Component),Be=function(e){function t(t){var n=e.call(this,t)||this;return n.toggleNodeVisiblity=function(e,t){var r=String(t.value),a=n.props.visibleNodeTypes;a=t.checked?b.uniq(a.concat([r])):a.filter(function(e){return e!==r}),tt.dispatch(F(a))},n.toggleEdgeVisibility=function(e,t){var r=String(t.value),a=n.props.visibleEdgeTypes;a=t.checked?b.uniq(a.concat([r])):a.filter(function(e){return e!==r}),tt.dispatch(M(a))},n.state={allNodeTypes:[],allEdgeTypes:[]},n}return l.c(t,e),t.getDerivedStateFromProps=function(e){return{allEdgeTypes:b.uniq(b.map(e.edges,\"label\")),allNodeTypes:b.uniqBy(b.map(e.nodes,function(e){return{color:e.color,type:e._node_type}}),\"type\")}},t.prototype.render=function(){var e=this;return o.createElement(C.a,{columns:\"equal\",textAlign:\"left\",divided:!0},o.createElement(C.a.Column,null,o.createElement(N.a,{as:\"h5\"},\"Node Types\"),o.createElement(A.a,{floated:\"left\"},this.state.allNodeTypes.map(function(t){return o.createElement(A.a.Item,{key:t.type},o.createElement(Re.a,{checked:b.includes(e.props.visibleNodeTypes,t.type),value:t.type,onChange:e.toggleNodeVisiblity,label:t.type}))}))),o.createElement(C.a.Column,null,o.createElement(N.a,{as:\"h5\"},\"Edge Types\"),o.createElement(A.a,{floated:\"left\"},this.state.allEdgeTypes.map(function(t){return o.createElement(A.a.Item,{key:t},o.createElement(Re.a,{checked:b.includes(e.props.visibleEdgeTypes,t),value:t,onChange:e.toggleEdgeVisibility,label:t}))}))))},t}(o.Component),Le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l.c(t,e),t.prototype.render=function(){return o.createElement(\"div\",null,o.createElement(Se.a,{key:\"undo\",icon:\"undo\",content:\"Undo\",style:{marginLeft:\"auto\"},attached:\"left\",labelPosition:\"left\",onClick:this.props.onUndo,disabled:!this.props.canUndo}),o.createElement(Se.a,{key:\"redo\",icon:\"redo\",content:\"Redo\",attached:\"right\",style:{marginLeft:\"auto\"},labelPosition:\"right\",onClick:this.props.onRedo,disabled:!this.props.canRedo}),o.createElement(Se.a,{key:\"reset\",icon:\"eraser\",content:\"Reset\",style:{float:\"right\"},negative:!0,labelPosition:\"right\",onClick:this.props.onReset,disabled:!this.props.canUndo}))},t}(o.Component),Ae=Object(c.connect)(function(e){return{canUndo:e.visibleGraph.past.length>0,canRedo:e.visibleGraph.future.length>0}},function(e){return{onUndo:function(){return e(S.ActionCreators.undo())},onRedo:function(){return e(S.ActionCreators.redo())},onReset:function(){e(S.ActionCreators.jumpToPast(0))}}})(Le),je=[\"Loaded\",\"File Of\"],Ue=function(e){function t(t){var n=e.call(this,t)||this;return n.componentWillUnmount=function(){var e;tt.dispatch(F([])),tt.dispatch(M([])),tt.dispatch(w([],[])),tt.dispatch(U([])),tt.dispatch((e=[],{type:I.SET_VISIBLE_EDGES,payload:{edges:e}})),tt.dispatch(P(void 0)),tt.dispatch(O(void 0)),tt.dispatch(S.ActionCreators.clearHistory())},n.state={ready:!1},n}return l.c(t,e),t.prototype.componentDidUpdate=function(e){this.props.visibleNodes.length-e.visibleNodes.length===ce&&d.toastr.warning(\"Pull in limit (\"+ce+\") reached\",\"Double click the node again to pull in more neighbours.\")},t.prototype.loadGraph=function(){var e=this;fetch(\"/api/graph/\"+this.props.match.params.id).then(function(e){return e.json()}).then(function(t){var n={directed:t.directed,edges:t.links.map(function(e){return{from:e.source,id:e.id,label:e.type,properties:e.properties,to:e.target}}),graph:t.graph,multigraph:t.multigraph,nodes:t.nodes.map(function(e){var t=Object.assign(e);return t.label=(e._display||\"\").substring(0,15),15===t.label.length&&(t.label+=\"...\"),t.color=e._color,t})};tt.dispatch(F(b.uniq(b.map(n.nodes,\"_node_type\")))),tt.dispatch(M(b.uniq(b.map(n.edges,\"label\")).filter(function(e){return!b.includes(je,e)}))),tt.dispatch(w(n.nodes,n.edges));var r=n.nodes.filter(function(e){return\"Alert\"===e._node_type});if(r.length>0)tt.dispatch(U(r.slice())),r.map(function(e){return tt.dispatch(H(e.id))}),tt.dispatch(S.ActionCreators.clearHistory());else{var a=b.sampleSize(n.nodes,10);tt.dispatch(U(a)),tt.dispatch(H(a[0].id)),tt.dispatch(S.ActionCreators.clearHistory())}e.setState({ready:!0})})},t.prototype.loadAndResetView=function(){this.tab.state.activeIndex=0,this.loadGraph(),d.toastr.info(\"Evidence added to graph\",\"Uploaded artifact merged into graph.\",{timeOut:1e4})},t.prototype.componentWillMount=function(){this.loadGraph()},t.prototype.makeDivider=function(e,t){return o.createElement(T.a,{horizontal:!0},o.createElement(N.a,{as:\"h4\"},o.createElement(v.a,{name:t}),e))},t.prototype.render=function(){var e=this;return!1===this.state.ready?o.createElement(B,{text:\"Fetching Graph Data\"}):o.createElement(C.a,{columns:2,celled:\"internally\",padded:!1},o.createElement(C.a.Column,{width:10},o.createElement(_.a,{ref:function(t){return e.tab=t},menu:{color:\"black\",secondary:!0,pointing:!0,attached:\"top\"},panes:[{menuItem:\"Graph\",render:function(){return o.createElement(be,{visibleEdges:e.props.visibleEdges,visibleNodes:e.props.visibleNodes})}},{menuItem:\"Tree\",render:function(){return o.createElement(Ce,{visibleEdges:e.props.visibleEdges,visibleNodes:e.props.visibleNodes})}},{menuItem:\"Timeline\",render:function(){return o.createElement(te,{visibleEdges:e.props.visibleEdges,visibleNodes:e.props.visibleNodes})}},{menuItem:\"Table\",render:function(){return o.createElement(K,{visibleEdges:e.props.visibleEdges,visibleNodes:e.props.visibleNodes})}},{menuItem:\"Markdown\",render:function(){return o.createElement(Ne,{visibleEdges:e.props.visibleEdges,visibleNodes:e.props.visibleNodes})}},{menuItem:\"Add Evidence\",render:function(){return o.createElement(Ge,{postRoute:\"/add/\"+e.props.match.params.id,postUploadHandler:e.loadAndResetView.bind(e)})}}]})),o.createElement(C.a.Column,{width:6,stretched:!1,style:{overflowY:\"auto\",maxHeight:\"100vh\"}},o.createElement(C.a.Row,{centered:!0},o.createElement($,{nodes:this.props.nodes.length,edges:this.props.edges.length,visibleNodes:this.props.visibleNodes.length,visibleEdges:this.props.visibleEdges.length,latestEvent:this.props.latestEvent,earliestEvent:this.props.earliestEvent})),o.createElement(\"br\",null),o.createElement(C.a.Row,null,o.createElement(D.a,{defaultActiveIndex:[0,1,2,3,4,5,6],exclusive:!1,panels:[{key:\"node_search\",title:{children:this.makeDivider(\"Node Search\",\"search\")},content:{children:o.createElement(W,{nodes:this.props.nodes})}},{key:\"graph_controls\",title:{children:this.makeDivider(\"Graph Controls\",\"configure\")},content:{children:o.createElement(Ae,null)}},{key:\"node_visibility_controls\",title:{children:this.makeDivider(\"Node/Edge Visibility\",\"eye\")},content:{children:o.createElement(Be,{nodes:this.props.nodes,edges:this.props.edges,visibleEdgeTypes:this.props.visibleEdgeTypes,visibleNodeTypes:this.props.visibleNodeTypes})}},{key:\"node_info\",title:{children:this.makeDivider(\"Node Info\",\"info circle\")},content:{children:o.createElement(Z,{node:this.props.selectedNode})}},{key:\"edge_info\",title:{children:this.makeDivider(\"Edge Info\",\"info circle\")},content:{children:[o.createElement(J.a,{key:\"table\",edge:this.props.selectedEdge}),!1]}}]}))))},t}(o.Component),He=Object(c.connect)(function(e){return{visibleNodes:e.visibleGraph.present.visibleNodes,visibleEdges:e.visibleGraph.present.visibleEdges,selectedNode:e.selectedNode.node,selectedEdge:e.selectedEdge.edge,nodes:e.graph.nodes,edges:e.graph.edges,visibleNodeTypes:e.visibleGraph.present.visibleNodeTypes,visibleEdgeTypes:e.visibleGraph.present.visibleEdgeTypes,latestEvent:e.visibleGraph.present.latestEvent,earliestEvent:e.visibleGraph.present.earliestEvent}})(Ue),Fe=n(71),Me=n(251),Ve=n(254),qe=n(252),We=n(55),ze=n(253),Je=n(138),Ye=function(e){function t(t){var n=e.call(this,t)||this;n.handlePageClick=function(e){e.currentTarget.dataset.page&&n.setState({currentPage:Number(e.currentTarget.dataset.page)})},n.handleDirectionClick=function(e){var t=e.currentTarget.dataset.direction,r=0;\"LEFT\"===t&&n.state.currentPage>1?r=-1:\"RIGHT\"===t&&n.state.currentPage<n.state.numberOfPages&&(r=1),0!==r&&n.setState({currentPage:n.state.currentPage+r})};var r=t.rowsPerPage||5,a=Math.ceil(t.data.length/r),i=t.columnHeader||Object.keys(t.data[0]||[]);return n.state={currentPage:1,rowsPerPage:r,numberOfPages:a,columns:i},n}return l.c(t,e),t.prototype.render=function(){var e=this,t=this.props.data,n=this.state,r=n.currentPage,a=n.rowsPerPage,i=n.numberOfPages,s=n.columns,c=t.slice((r-1)*a,r*a),d=this.state.currentPage-1;i<=3||1===this.state.currentPage?d=1:this.state.currentPage===i&&(d=this.state.currentPage-2);var u=Array.from(new Array(Math.min(3,i)),function(e,t){return t+d}),p=0;return o.createElement(\"div\",null,o.createElement(X.a,l.a({},this.props.tableProps),this.props.header&&o.createElement(Fe.a,null,o.createElement(Me.a,null,s.map(function(e){return o.createElement(Ve.a,{key:e},e)}))),o.createElement(qe.a,null,c.map(function(e){return o.createElement(Me.a,{key:p++},s.map(function(t){return o.createElement(We.a,{collapsing:!0,key:p++,content:e[t]})}))})),o.createElement(ze.a,null,o.createElement(Me.a,null,o.createElement(Ve.a,l.a({},{colSpan:this.state.columns.length}),o.createElement(y.a,{floated:\"right\",pagination:!0},o.createElement(Je.a,{icon:\"angle double left\",\"data-page\":1,onClick:this.handlePageClick}),o.createElement(Je.a,{\"data-direction\":\"LEFT\",onClick:this.handleDirectionClick,icon:\"angle left\"}),u.map(function(t){return o.createElement(Je.a,{key:t,content:\"\"+t,\"data-page\":t,onClick:e.handlePageClick,active:t===e.state.currentPage,as:\"a\"})}),o.createElement(Je.a,{\"data-direction\":\"RIGHT\",onClick:this.handleDirectionClick,icon:\"angle right\"}),o.createElement(Je.a,{icon:\"angle double right\",\"data-page\":i,onClick:this.handlePageClick})))))))},t}(o.Component),Xe=function(e){function t(t){var n=e.call(this,t)||this;return n.componentWillMount=function(){fetch(\"/api/categories/\"+n.props.category).then(function(e){return e.json()}).then(function(e){return n.setState({entries:e,ready:!0})})},n.state={entries:[],ready:!1},n}return l.c(t,e),t.prototype.render=function(){var e=this;if(!1===this.state.ready)return o.createElement(B,{text:\"Fetching Entries\"});if(0===this.state.entries.length)return o.createElement(N.a,{as:\"h1\",textAlign:\"center\",style:{marginTop:\"50px\"}},\"No Entries!\");var t=this.state.entries.map(function(t,n){var r=b.toPairs(t.metadata).map(function(e){return\"string\"===typeof e[1]&&e[1].startsWith(\"http\")&&(e[1]=o.createElement(Se.a,{href:e[1],content:\"Follow Link\"})),[q(e[0]),o.createElement(Ie.a,{key:n,content:e[1],trigger:o.createElement(\"span\",null,e[1])})]});return r=r.concat([[\"Comment\",t.comment],[\"Graph\",o.createElement(h.a,{key:n,to:e.props.category+\"/\"+t.id},o.createElement(Se.a,{color:\"blue\",content:\"View Graph\"}))]]),b.fromPairs(r)}),n=Object.keys(this.state.entries[0].metadata).concat([\"comment\",\"Graph\"]);return o.createElement(Pe.a,{style:{marginTop:\"50px\",width:\"90%\",maxWidth:\"90%\"}},o.createElement(N.a,{as:\"h2\",textAlign:\"center\"},this.props.name),o.createElement(Ye,{data:t,tableProps:{striped:!0,size:\"small\",fixed:!0},header:!0,rowsPerPage:10,columnHeader:n.map(function(e){return q(e)})}))},t}(o.Component),Ze=function(e){function t(t){var n=e.call(this,t)||this;return n.renderEntriesForCategory=function(e,t){return function(n){return o.createElement(Xe,l.a({},n,{name:t,category:e}))}},n.state={entries:[{id:\"upload\",route:\"/\",name:\"Upload Data\",icon:o.createElement(v.a,{name:\"upload\"}),component:function(){return o.createElement(Ge,{postRoute:\"/new\"})}}]},n}return l.c(t,e),t.prototype.componentWillMount=function(){var e=this;fetch(\"/api/categories?uploaded=true\").then(function(e){return e.json()}).then(function(t){e.setState({entries:e.state.entries.concat(t.map(function(e){return{id:e.id,name:e.name,route:\"/\"+e.id}}))})})},t.prototype.render=function(){var e=this;return o.createElement(m.a,null,o.createElement(\"div\",null,o.createElement(\"div\",{id:\"siderbar\"},o.createElement(g.a,{style:{position:\"fixed\",width:\"150px\"},as:y.a,inverted:!0,animation:\"overlay\",visible:!0,vertical:!0,width:\"thin\"},this.state.entries.map(function(e,t){return o.createElement(h.a,{to:e.route,key:t},o.createElement(y.a.Item,null,\"icon\"in e&&e.icon,e.name))}))),o.createElement(\"div\",{id:\"content\",style:{marginLeft:\"150px\"}},o.createElement(f.a,null,this.state.entries.map(function(t,n){return void 0!==t.component?o.createElement(E.a,{key:n,exact:!0,path:t.route,component:t.component}):o.createElement(E.a,{key:n,exact:!0,path:t.route,render:e.renderEntriesForCategory(t.id,t.name)})}),o.createElement(E.a,{path:\"/:category/:id\",exact:!0,component:He})))))},t}(o.Component),$e={edges:[],nodes:[]};var Ke={edge:void 0};var Qe={node:void 0};var et=Object(p.b)({visibleGraph:k()(function(e,t){void 0===e&&(e=le);var n=e;switch(t.type){case I.SET_VISIBLE_NODES:n=l.a({},e,{visibleNodes:t.payload.nodes});break;case I.SET_VISIBLE_EDGES:n=l.a({},e,{visibleEdges:t.payload.edges});break;case I.PULL_IN_NEIGHBORS:var r=de(c=function(e,t,n,r){var a=Array.from(new Set(r.filter(function(n){return(n.from===t||n.to===t)&&b.includes(e.visibleEdgeTypes,n.label)}).reduce(function(e,t){return e.concat([t.from,t.to])},[]))).map(function(e){return n.filter(function(t){return t.id===e})[0]}).reduce(function(t,n){return void 0===e.visibleNodes.find(function(e){return n.id===e.id})?t.concat([n]):t},[]).slice(0,ce);return e.visibleNodes.concat(a)}(e,t.payload.node,t.nodes,t.edges),t.edges),a=ue(b.flatMap(r,function(e){return b.map(e.properties.data,\"timestamp\")})),i=a[0],o=a[1];n=l.a({},e,{visibleNodes:c,visibleEdges:r,latestEvent:pe(o),earliestEvent:pe(i)});break;case I.HIDE_NODE:r=de(c=e.visibleNodes.filter(function(e){return e.id!==t.payload.node}),e.visibleEdges);var s=ue(b.flatMap(r,function(e){return b.map(e.properties.data,\"timestamp\")}));i=s[0],o=s[1],n=l.a({},e,{visibleNodes:c,visibleEdges:r,latestEvent:pe(o),earliestEvent:pe(i)});break;case I.ADD_NODE:r=de(c=function(e,t,n){var r=n.filter(function(e){return e.id===t})[0];return e.visibleNodes.map(function(e){return e.id}).indexOf(t)>-1?e.visibleNodes:[r].concat(e.visibleNodes)}(e,t.payload.node,t.nodes),t.edges);var c,d=ue(b.flatMap(r,function(e){return b.map(e.properties.data,\"timestamp\")}));i=d[0],o=d[1],n=l.a({},e,{visibleNodes:c,visibleEdges:r,latestEvent:pe(o),earliestEvent:pe(i)});break;case I.SET_VISIBLE_NODE_TYPES:n=l.a({},e,{visibleNodeTypes:t.payload.nodeTypes});break;case I.SET_VISIBLE_EDGE_TYPES:n=l.a({},e,{visibleEdgeTypes:t.payload.edgeTypes});break;case I.RUN_MUTATOR_FROM_NODE:var u=t.mutator.mutate(t.visibleNodes,t.visibleEdges,t.visibleNodeTypes,t.visibleEdgeTypes,t.nodes,t.edges,t.selectedNode),p=u.visibleNodes,m=u.visibleEdges,h=ue(b.flatMap(m,function(e){return b.map(e.properties.data,\"timestamp\")}));i=h[0],o=h[1],n=l.a({},e,{visibleEdges:m,visibleNodes:p,latestEvent:pe(o),earliestEvent:pe(i)});break;default:n=e}return function(e){e.visibleNodes=e.visibleNodes.filter(function(t){return b.includes(e.visibleNodeTypes,t._node_type)});var t=e.visibleNodes.reduce(function(e,t){return e[t.id]=t,e},{});return e.visibleEdges=e.visibleEdges.filter(function(n){return b.includes(e.visibleEdgeTypes,n.label)&&b.has(t,n.from)&&b.has(t,n.to)}),e}(n)},{ignoreInitialState:!0}),toastr:d.reducer,graph:function(e,t){switch(void 0===e&&(e=$e),t.type){case r.SET_EDGES:return l.a({},e,{edges:t.payload.edges});case r.SET_NODES:return l.a({},e,{nodes:t.payload.nodes});case r.SET_NODES_AND_EDGES:return l.a({},e,{nodes:t.payload.nodes,edges:t.payload.edges});default:return e}},selectedNode:function(e,t){switch(void 0===e&&(e=Qe),t.type){case i.SET_SELECTED_NODE:return{node:void 0===t.payload.node?void 0:t.nodes.filter(function(e){return e.id===t.payload.node})[0]};default:return e}},selectedEdge:function(e,t){switch(void 0===e&&(e=Ke),t.type){case a.SET_SELECTED_EDGE:return{edge:void 0===t.payload.edge?void 0:t.edges.filter(function(e){return e.id===t.payload.edge})[0]};default:return e}}}),tt=Object(p.c)(et),nt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return l.c(t,e),t.prototype.render=function(){return o.createElement(c.Provider,{store:tt},o.createElement(u.a,{timeOut:2e3,newestOnTop:!1,preventDuplicates:!0,position:\"top-center\",progressBar:!1,closeOnToastrClick:!0}),o.createElement(Ze,null))},t}(o.Component),rt=Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function at(e){navigator.serviceWorker.register(e).then(function(e){e.onupdatefound=function(){var t=e.installing;t&&(t.onstatechange=function(){\"installed\"===t.state&&(navigator.serviceWorker.controller?console.log(\"New content is available; please refresh.\"):console.log(\"Content is cached for offline use.\"))})}}).catch(function(e){console.error(\"Error during service worker registration:\",e)})}s.render(o.createElement(nt,null),document.getElementById(\"root\")),function(){if(\"serviceWorker\"in navigator){if(new URL(\"\",window.location.toString()).origin!==window.location.origin)return;window.addEventListener(\"load\",function(){var e=\"/service-worker.js\";rt?(function(e){fetch(e).then(function(t){404===t.status||-1===t.headers.get(\"content-type\").indexOf(\"javascript\")?navigator.serviceWorker.ready.then(function(e){e.unregister().then(function(){window.location.reload()})}):at(e)}).catch(function(){console.log(\"No internet connection found. App is running in offline mode.\")})}(e),navigator.serviceWorker.ready.then(function(){console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://goo.gl/SC7cgQ\")})):at(e)})}}()}},[[387,2,1]]]);","extractedComments":[]}